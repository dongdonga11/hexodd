[{"title":"我们","date":"2023-06-08T09:32:55.800Z","url":"/2023/06/08/we/","categories":[["undefined",""]],"content":"author TBD 标签列表、作者列表页 plus 标签收起、展开 作者列表动态获取，不再需要维护，并优化了展示形式 随机壁纸 看板娘 看板娘静音 看板娘 plus 增加聊天、配音优化 调色板 多语言 markdown 复选框支持 单页样式 图片懒加载 图片懒加载 plus sitemap 引入百度 sitemap 自动化更新频次默认值 valine 社评插件 last-updated 插件 登录组件 百度自动化提交 sitemap markdown 增强 将 valine 统计的阅读量进行展示 引入百度统计 页面密码访问 优化作者页面 中文 tag 、 中文 author 等引发的 404 问题 置顶、推荐等效果 图片灯箱 图片灯箱 plus 懒加载引起的IE无法看到图片 or kill IE！ TBW 网站那些奇怪的插件 Lazy loading attribute 和 Intersection Observer API "},{"title":"Markdown 书写示例","date":"2023-06-08T09:32:55.782Z","url":"/2023/06/08/exp/","categories":[["undefined",""]],"content":"插槽 目录[[toc]] 引用 这是一条引用 自定义容器::: info 信息这是一个信息::: ::: tip 告示这是一个提示::: ::: warning 警告这是一个警告::: ::: danger STOP危险区域，禁止通行::: ::: details 点击查看代码 ::: ::: v-pre&#123;&#123; This will be displayed as-is &#125;&#125;::: ::: center居中文字::: ::: right居右文字::: 高亮我是 &#x3D;&#x3D;高亮&#x3D;&#x3D; 的 代码块行高亮&#123;1,3-5&#125; 更多用法参照： emoji:tada: 复选框 看板娘 调色板 多语言 上下标19^th^H2O 脚注脚注 1 链接^first. 流程图 TexEuler’s identity $e^{i\\pi}+1&#x3D;0$ is a beautiful formula in $\\mathbb{R}^2$. $$\\frac {\\partial^r} {\\partial \\omega^r} \\left(\\frac {y^{\\omega}} {\\omega}\\right)&#x3D; \\left(\\frac {y^{\\omega}} {\\omega}\\right) \\left{(\\log y)^r + \\sum_{i&#x3D;1}^r \\frac {(-1)^i r \\cdots (r-i+1) (\\log y)^{r-i}} {\\omega^i} \\right}$$ 演示::: demo 这是 demo 标题 ::: 存在超自然现象，谨慎使用！ 常用Front Matter 其他其他格式 请使用 Typora 编辑器辅助使用或者参照   书写规范，参见 此处"},{"title":"我的双11、618","date":"2023-06-08T09:32:55.779Z","url":"/2023/06/08/611118/","categories":[["undefined",""]],"content":" 2022 1111 - 9985.08 ::: info 来源猫::: 瑞幸咖啡 拿铁特调 2.0规格 18 * 2g * 3赠品 不锈钢咖啡杯实付 217.03单价 72.34比较速算 4.02 &#x2F; 杯 超白缸规格 20 * 20 * 30 cm * 2实付 76.32单价 38.06比较速算 3.17 &#x2F; L 丽尔泰椰浆规格 1L * 2实付 39.76单价 19.88比较速算 19.88 &#x2F; L 加贝水质检测笔 TDS实付 17.9 oatly 咖啡大师燕麦奶规格 1L * 6赠品 甄品精品冻干咖啡粉 * 6实付 117.45单价 19.58比较速算 19.58 &#x2F; L YEE PH 值 检测笔实付 23.22 Iphone 13规格 256G实付 5597.62 骰盘实付 12.97 德绒内衣 女童实付 84.22 璀璨宝石对决实付 142.92 wiyas EP106规格 重锤 三踏 X 架 琴包实付 1615.52 观锦农场营养土规格 绿植通用 4 斤实付 24.5比较速算 6.13 &#x2F; 斤 郁美净洋甘菊规格 35g * 6实付 183.82比较速算 30.64 &#x2F; 35g 耐尔女袜规格 6实付 45.04比较速算 7.51 &#x2F; 双 保洁 儿童牙膏规格 40g * 4实付 24.98比较速算 6.25 &#x2F; 支 恒源祥秋衣裤套装规格 中领 * 2实付 115.31比较速算 57.66 &#x2F; 套 绣球专用土规格 15L 酸性营养土 + 营养颗粒 + 绣球调蓝剂配方赠品 磷酸二氢钾 + 硫酸亚铁实付 20.91比较速算 1.39 &#x2F; L protefix 儿童牙膏 + 牙刷规格 4 + 4实付 47.87 ::: warning 合计8286.27::: ::: info 来源狗::: 水星路由器规格 AX3000实付 178.5 妙可蓝多 奶酪棒规格 500g * 4实付 127.54单价 31.89比较速算 6.38 &#x2F; 100g 黛珂 紫苏水+牛油果乳液规格 300ml + 300ml实付 388 ::: warning 合计694.04::: ::: info 来源多多::: 水族吸便器规格 30ML 28CM实付 2.58 尼特利水族液肥规格 综合肥 350ML实付 19.25比较速算 5.5 &#x2F; 100ML 拖鞋架规格 48CM &amp; 38CM实付 4.93 + 4.22 五月花 拖地湿巾规格 100 抽 * 5实付 14.92单价 2.98比较速算 0.3 &#x2F; 10 抽 书靠规格 2 个实付 6.01单价 3 松皮石规格 18 斤实付 46.79比较速算 2.6 &#x2F; 斤 黛珂牛油果乳霜规格 40g实付 161.41 水族滤材 石英中空球规格 5 斤实付 14.34比较速算 2.87 &#x2F; 斤 高锰酸钾规格 200ml赠品 滴管实付 7.87比较速算 3.94 &#x2F; 100ml 水草规格 雨裂 无菌杯趴地珍珠 天胡荽 迷你椒草 陶瓷环迷你绿九冠+大叶绿九冠+细叶铁皇冠实付 6.98 + 9.16 + 7.38 + 3.96 + 14.03 收纳盒规格 29 * 9 * 8.5 不规则 * 3实付 14.78单价 4.93 硫磺皂规格 85g * 5实付 8.97单价 1.79 过滤陶瓷环规格 5 斤实付 13.4比较速算 2.68 &#x2F; 斤 鱼药规格 白点 + 甲基兰粉 + 烂鳍烂尾 + 消毒粉 + 蒙眼康 + 肠炎灵 + 土霉素 + 万能鱼药 + 纯日本黄粉 + 体外寄生虫实付 14.38 丝塔芙身体乳规格 550g * 4实付 272.04单价 68.01 白发苔藓规格 15 * 10cm * 5实付 15.39单价 3.08 白云金丝规格 1.5 - 2.5cm * 20实付 17.02单价 0.85 溪流石规格 6-9mm 5 斤实付 6.25单价 1.25比较速算 1.25 &#x2F; 斤 水陆缸规格 20 * 20 * 30 前开门+顶掀盖实付 106.93 卡通酱油碟规格 5实付 9.26单价 1.85 水草剪刀规格 波浪剪 25cm实付 15.4 菲诺厚椰乳规格 1L * 2实付 25.71单价 12.86比较速算 12.86 &#x2F; L ::: warning 合计1004.77::: 待买卡分离盒子漱口水折叠桌子麻将键帽过滤器虾屋、繁殖屋辣椒蟹蕨类鱼类底滤板"},{"title":"搭建一个Hexo博客并用vercel部署","date":"2023-05-31T00:28:47.588Z","url":"/2023/05/31/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAHexo%E5%8D%9A%E5%AE%A2%E5%B9%B6%E7%94%A8vercel%E9%83%A8%E7%BD%B2%20(2)/","categories":[["undefined",""]],"content":"Hexo 是一款基于Node.js的静态博客生成器，具有简单易用、快速高效、丰富主题、插件支持等特点，适合用于个人博客、技术文档、个人网站等场景。而且基于 markdown 编写起来非常顺畅，个人非常喜欢这个博客。这次下定决心搭建一个 Hexo 博客来实现我日常分享的一个小博客网站。 前置准备 一台 windows 笔记本电脑，当然 mac 电脑也是没问题的，即使 Linux 电脑也是可以的。 Git工具: Git (git-scm.com) Node+ Npm工具：Node.js (nodejs.org) 准备好 Hexo 博客程序：  创建一个 Git 仓库 注册一个 vercel 账号(如果有自己的服务器或者不适用 vercel 可以不用管这一步)： 准备一个域名(如果不需要独立域名可以略过这一步) hexo 本地图片部署 正式开始安装 Hexo 工具上面的 GIT和 Node在百度或者谷歌上已经有很多相关专业的教程，这里就不详细讲解这块的知识了。一般来说到官网上下载完毕直接下一步下一步即可。我们先来全局安装一个 Hexo 工具 创建 hexo 本地博客程序安装完成之后我们就可以使用 hexo 的工具来创建博客了。在电脑上创建一个目录并进入该目录，我起名叫做 javier-blog，刚才我们安装过 Git 工具这时候就派上用场了。在该目录内右键找到 Git Bash Here 点击打开一个 Git的命令行窗口或者你可以使用其他的命令行工具。执行以下命令 启动 hexo 本地服务安装完成 hexo程序直接执行 hexo s 命令就可以打开 hexo 的本地服务。在命令行上会显示启动后的服务地址。 以上就正式搭建完成 hexo 的博客程序了。 修改博客的基本信息修改 博客的标题，副标题，描述，语言时区等信息 修改博客地址 创建 github 仓库打开  创建一个仓库用来存储我们的部署程序,创建后是这个样子的。 同步本地 Hexo 部署页面到 github 中初始化 git 项目 打开本地 **hexo **项目目录并执行下面的命令,用来安装 git 的部署组件 安装之后在项目目录中找到**_config.yml **修改 deploy 参数 执行 hexo g 然后执行 hexo d 将静态页面部署到 github 上，是这个样子的。 将项目部署到 vercel 上如果不需要部署到 vercel 上此步可以略过 在 **dashboard **上 选择 Create a New Project 在关联的 **github **账户中，找到刚才的博客仓库，选择 import 进入部署页面选择 deploy 生成之后点击 Continue to Dashboard 点击 Visit 就可以看到刚刚生成的博客程序了 将项目资源文件放入同一个仓库中在命令行创建一个新的分支并切换过去 提交代码 常用命令 "},{"title":"Hello World","date":"2023-05-30T09:05:55.915Z","url":"/2023/05/30/hello-world/","categories":[["undefined",""]],"content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post More info: Writing Run server More info: Server Generate static files More info: Generating Deploy to remote sites More info: Deployment"},{"title":"vue 2.6 微网站授权登录方案","date":"2021-12-05T16:00:00.000Z","url":"/2021/12/06/sicker/vue%20authentication%20upon%20wechat%20official%20account/","tags":[["vue","/tags/vue/"],["wechat","/tags/wechat/"]],"categories":[["undefined",""]],"content":"流程图 ::: center路由守卫流程图::: 路由守卫在 /src 路径下建立 permission.js ，并在 main.js 中进行引入; permission.js main.js 页面router.js login.vue "},{"title":"我是如何初始化一个 vue 的项目的","date":"2021-11-21T16:00:00.000Z","url":"/2021/11/22/sicker/how%20do%20I%20initialize%20the%20VUE%20project/","tags":[["Vue","/tags/Vue/"]],"categories":[["undefined",""]],"content":"风格指南 组件名应尽量使用多单词组合，避免撞车关键词如班级学生组件，我将采用 klass-student 而避免使用 class 或者 student prop 使用参数校验 只应该拥有单个活跃实例的组件应该以 The 前缀命名，以示其唯一性。 和父组件紧密耦合的子组件应该以父组件名作为前缀命名。 模板中的组件名大小写使用小写+横线连接的形式如 my-component JS 、 VUE 文件命名遵循横线连接 官方风格 vue-element-admin 使用 vue-cli 全局安装组件 创建项目 安装组件（自定义，需要逐个安装） 初始化项目 继续通过 npm 安装 建设 scss 公共路径 新建 vue.config.js 配置文件 键入简单 webpack 初始化配置 配置代码格式 配置 vscode 安装 vscode 组件 vetur EditorConfig for VS Code ESLint Prettier - Code formatter修改 VSCode setting.json 配置 .editorconfig 键入 配置 elsint 键入 键入 配置 git 代码忽略 键入 "},{"title":"在 ubuntu 上安装 docker 和 docker-compose","date":"2021-08-24T16:00:00.000Z","url":"/2021/08/25/sicker/how%20to%20install%20docker%20&%20docker-compose%20on%20ubuntu/","tags":[["Docker","/tags/Docker/"]],"categories":[["undefined",""]],"content":" 在 ubuntu 上安装 docker 和 docker-compose ，经常会用到，但一直没有编排好；这次作一个记录； 升级 apt 卸载 docker （如果有） 更新依赖 添加Docker官方的GPG密钥： Docker存储库添加到APT源命令： 安装 docker :::tip可以通过 docker -v 验证是否安装成功！::: 启动 docker 服务 通过 github 上的发行版列表，找到自己喜欢的版本，并记录下 版本号 下载 docker-compose :::tip简单解释下命令：下载 docker-compose-Linux-x86_64 文件，并保存到 /usr/local/bin/ 路径下，并重命名为 docker-compose::: 为 docker-compose 授权执行权限 验证安装 问题一览 GPG报错GPG error:  bionic InRelease: The following signatures couldn’t be verified because the public key is not available: NO_PUBKEY 7EA0A9C3F273FCD8 解决方案： 查看cpu架构 解决方案： 参考一览 linux下如何查看服务器的硬件配置信息 apt 和 apt-get 之间有什么区别？"},{"title":"前端批量导出canvas方案","date":"2021-06-29T16:00:00.000Z","url":"/2021/06/30/sicker/frontend%20batch%20export%20canvas/","tags":[["Vue","/tags/Vue/"]],"categories":[["undefined",""]],"content":" 在后台的时候，经常学会遇到批量导出的场景；通常我们可以交由后端去处理，然而最近在开发中遇到了需要绘制 canvas 后再导出的场景； 方案面对这样的需求，提出了以下几个方案： 方案一：后端绘制 canvas ，前端获取后端返回文件地址数组，然后遍历下载； 方案二：后端绘制 canvas ，接着对文件进行打包压缩处理，然后前端下载一个压缩文件； 方案三：后端绘制 canvas ，前端获取后端返回文件地址数组，然后遍历下载，接着前端来进行打包压缩处理。 方案四：前端绘制 canvas ，然后遍历下载。 方案五：前端绘制 canvas ，接着前端来进行打包压缩处理。 方案简单分析 从图片可以看出，直接进行批量下载，非常的难看；所以，未经打包压缩直接下载，显然不够优雅，方案一、方案四 out。 而后端绘制 canvas ，又不够灵活，方案二、方案三也宣布 out。 剩下的便是方案五了；下面就让我们一起看看如何实现吧。 实现这就要请出本期的嘉宾 JSZip 和 FileSaver.js 了。 JSZip： 大家好，我是 JSZip， 是一个 javascript 库，用于创建、读取和编辑 .zip 文件，带有一个可爱而简单的API。这是我的简历。请大家多多喜欢我。 FileSaver.js：好啊，我是 FileSaver，是一个在客户端保存文件的解决方案,适用 web 应用程序在客户端生成文件哦~ 康康我 最后，还有我们的特殊嘉宾 qrcode ！ qrcode：很高兴见到大家，我是 qrcode ，我的本领是生成二维码并保存成各种格式，可以在服务器和客户端运行呢。我在这 接下去，就让我们步入正题吧！让各位嘉宾与选手拿出他们的真本事。 只见， canvas 第一个站了出来，随着她的出现，编辑器上慢慢浮现出； 漂亮，我们的 canvas 选手，兔起鹘落间，已经在浏览器上画上了一个绝美的图卷； 然后，一旁的数据一看，就不满的叫嚷起来，「哼，没有我，终究是个死物」。 data 选手，手一挥，编辑器上就留下了一排数据； forEach 见自己心水的 canvas 面露难色，忙站了出来，他说：「遍历的事情就交给我吧」。 说话间，只见编辑器上刷刷出现了数行代码。不一会儿与 canvas 相得益彰。真不愧是老牌的选手了。 果然， data 一看，竟是如此和谐，一时无话可说。只得退下； 然而文无第一，武无第二。这一对狗男女的配合虽然紧密无间，但是，终究无法折服所有人。 早已站在一侧的老牌强旅 image 悠悠然走上一步，道：「妙则妙矣，然任你多么精妙，还不是要依赖于我 image」。她指着 let base64 = canvas.toDataURL(&quot;image/png&quot;); ,缓缓将狗男女的弱点道了出来，紧接着，娇手一挥。编辑器也随着改变。 「好好好」，却没想到，这次出来的竟是我们的嘉宾 3 人组。编辑器又是刷的一变。 「一时技痒，献丑献丑！」 这一下，众人再也没有下场显圣之心，本场大赛风头最盛的竟是嘉宾三人组。众人悻悻然对冠军失去了兴趣； 最后由塞卡，订下这次赛事的主基调 嘉宾们也兴致很高的留下了签名 "},{"title":"在 centos 上安装 docker 和 docker-compose","date":"2021-06-15T16:00:00.000Z","url":"/2021/06/16/sicker/how%20to%20install%20docker%20&%20docker-compose%20on%20centos/","tags":[["Docker","/tags/Docker/"]],"categories":[["undefined",""]],"content":" 在 centos 上安装 docker 和 docker-compose ，经常会用到，但一直没有编排好；这次作一个记录； 配置阿里源 登陆阿里云，然后访问： 阿里容器加速 按照官方提供的文档进行操作即可 安装 yum-utils 包 配置 yum ，新增源 速度不理想的解决方案 一键安装 docker :::tip可以通过 docker -v 验证是否安装成功！::: 启动 docker 服务 通过 github 上的发行版列表，找到自己喜欢的版本，并记录下 版本号 下载 docker-compose :::tip简单解释下命令：下载 docker-compose-Linux-x86_64 文件，并保存到 /usr/local/bin/ 路径下，并重命名为 docker-compose::: docker-compose 下载不动解决方案 gitee 下载后上传该文件即可 为 docker-compose 授权执行权限 验证安装 "},{"title":"Zentao在Windows中安装部署","date":"2021-05-25T16:00:00.000Z","url":"/2021/05/26/XBlack/zentao%20deploy/","tags":[["ZenTao","/tags/ZenTao/"]],"categories":[["undefined",""]],"content":"一、下载zandao官网,可以根据自己的的需求来下载对应的版本（不同版本Zentao也有官方文档） 应为是自己使用，所以就用开源版12.5.3,点击后界面跳转至，找到下载地址后根据自己的需求来确定下载的软件需求，根据提示信息将软件保存至目标位置 二、安装双击刚刚下载的软件， 根据提示选择软件保存的路径可以选择默认路径： 也可以根据自己的要求来选择安装路径，点击“Extract”,进行下一步（如图所示），在此期间不要点击任何按钮直至安装完成 三、启动根据自己安装的路径找找到软件的安装包（D:\\Software\\ZenTao\\xampp）这个是我自己的安装路径 点击“start.exe”打开，弹出禅道的运行环境，点击“启动禅道“（使应为首次使用的原因，自身要安装一些环境） 环境安装完成后，系统会提示你修改数据库密码，你也可以不选择修改（密码比较复杂，你会记不住的） Apache用户访问验证： 禅道启动后，默认是开启了Apache用户访问验证 ，如下图： 如果不想开启访问验证功能，可以把 集成面板最后一行左侧的对号去掉 启用访问验证后，用户需要先输入集成面板最后一行的帐号密码（此帐号密码需要提供给所有禅道登录人员）才可以访问到禅道登录页面（登录页面需要输入禅道的登录帐号方可登录，默认登录禅道帐号：admin 密码：123456） 如果需要修改Apache用户访问验证的账号和密码，可以在运行集成面板 最后一行的“更改”按钮 进行修改 点击“访问禅道”，首次进入时（如下图所示），重新修改密码 修改密码完成后，点击“保存”，（流程可以随便选择） 点击“保存“后就进入禅道系统首页，这里就部署完成了，结下来就可以新建项目操作了 备注： 点击：“数据库管理” 页面跳转至数据库页面：并输入该开始时修改的数据库密码 在登录页面填写 xampp&#x2F;zentao&#x2F;config&#x2F;my.php 里的对应参数，即可进入禅道数据库 系 统：默认选择MySQL 服务器：对应填写下图的$config-&gt;db -&gt;host和port的参数（比如下图 $config-&gt;db -&gt;host &#x3D; ‘127.0.0.1’， $config-&gt;db -&gt;port &#x3D; ‘3306’。那么服务器填写：127.0.0.1:3306） 用户名：对应填写下图的 $config-&gt;db -&gt;user &#x3D; ‘zentao’ 。那么用户名就应该填写zentao 密 码：对应填写下图的 $config-&gt;db -&gt;password &#x3D; ‘ ‘，中单引号里的值。（每个人的数据库密码会不一样，单引号里显示的值是什么，密码就填写什么） 数据库：对应填写下图的 $config-&gt;db -&gt;name &#x3D; ‘zentao ‘ 中的zentao "},{"title":"github提交流程","date":"2021-05-25T16:00:00.000Z","url":"/2021/05/26/sunyifang/gitFlow/","tags":[["git","/tags/git/"]],"categories":[["undefined",""]],"content":"进入git首页点击fork复制一份代码到自己的线上库 点击进入该项目fork地址（就是这个位置） 克隆代码到本地在本地你可以自己随便搞 分支、开发、合并 开发结束后优先拉取远端代码本地合并（若没有冲突下一步）开发结束后点击这里和并请求 点击创建新的合并左侧为待合并、右侧为合并 选择复核人员待合并&#x2F;合并"},{"title":"JSON.parse方法是如何工作的？","date":"2021-05-19T16:00:00.000Z","url":"/2021/05/20/sicker/how%20does%20json%20parse%20work/","tags":[["JavaScript","/tags/JavaScript/"]],"categories":[["undefined",""]],"content":" JSON.parse 方法一直以为一直就这么用了，大致也知道它对于字符串格式比较严格，即便有时候可以通过编译器解释器，但是却若非标准 json 格式就无法转成 object。这次也因为后端一个奇怪的返回，我决定好好搞懂它。 代码验证首先，依据是老规矩，代码验证，因为后端返回的三种格式分别如下： ‘[“sdalkjald”]’ ‘{“attachment”:”请上传开发自测报告”}’ “服务器错误” 于是，为了能兼容 3 者，我作了如下方法进行处理， 执行结果： 一切似乎都在预期内，但是我总感觉，事情没这么简单。 本着折腾本腾的使命感，我打算继续塞些奇奇怪怪的参数进去跑一跑，为了方便测试，我对上述代码进行了改造 为了方便对应，我直接给出了对照 参数 元数据类型 返回结果 是否能被解析 ‘[“hello”]’ string object(array) √ [“hello”] object(array) - ‘{“attachment”:”请上传开发自测报告”,}’ string - ‘{“attachment”:”请上传开发自测报告”}’ string object √ “服务器错误” string - “true” string boolean √ false boolean boolean √ 123 number number √ “123” string number √ {} object - “{}” string object √ 结论对象、以及非特殊字符串无法被 JSON.parse() 解析到； 这让我想到了 eval() ，两者对于绝大多数的解析几乎一致； 将测试方法中的 JSON.parse(e) 更为 eval(&quot;(&quot;+e+&quot;)&quot;) 后，可以达到对照表 参数 元数据类型 返回结果 是否能被解析 是否与 JSON.parse() 结果一致 ‘[“hello”]’ string object(array) √ √ [“hello”] object(array) - √ ‘{“attachment”:”请上传开发自测报告”,}’ string object √ ‘{“attachment”:”请上传开发自测报告”}’ string object √ √ “服务器错误” string - √ “true” string boolean √ √ false boolean boolean √ √ 123 number number √ √ “123” string number √ √ {} object - √ “{}” string object √ √ 可以看到，两者确实存在极其相似的特性。 区别主要在于，字符串除了标准 json 串、 number 和 boolean 以外，非标准 json 串，亦可以解析。 那么是否 eval() 比 JSON.parse() 更佳呢？ 答案是不能！ 执行上述语句，可以看到，页面甚至跳转到了百度 所以，当数据来源无法可信时，使用 eval 并不安全。 so… 参考 mdn 海角在眼前 博客 "},{"title":"后台系统使用导出Excel组件","date":"2021-05-18T16:00:00.000Z","url":"/2021/05/19/linvkey/exporting%20excel%20table/","tags":[["JavaScript","/tags/JavaScript/"],["Vue","/tags/Vue/"]],"categories":[["undefined",""]],"content":"描述最近在做后台项目中遇到要导出Excel的功能，这个功能当时特别紧急，几乎就是做完老板要用，所以慌的嘞，做完就赶紧复盘记录。 实战例子1.首先需要在项目的src目录中的components文件夹下创建导出的子组件ExportExcel.vue 它需要引用@&#x2F;vendor&#x2F;Export2Excel 2.在src目录下创建vendor目录并创建Export2Excel.js 3.在需要导出成Excel的页面中导入组件 在methods中还要定义两个方法分别关于调用下载函数和定义表格格式 最后在模板语法中使用 :tHeader 是一个数组，它绑定的是自定义Excel的表头 在data中定义 :tValue 是一个数组，它中绑定的是Excel每一列的值 注意：tHeader和tValue数组中的值必须一一对应 v-if 中判断的是要导出的数据源是否存在 :list 中绑定的是要导出的数据源，注意数据源最好是用对象数组的形式且对象中的数据只有一层 例如： 而不能 如果你如上定义exportList2那么你想要取schoolName就必须school.schoolName,这样是不能作为表格的值来显示的 filename 中给的值是导出表格的名字 以上就是用vue开发后台系统项目中如何创建导出功能的内容。 亲测有效，奔走相告！"},{"title":"在vscode中断点调试node","date":"2021-05-16T16:00:00.000Z","url":"/2021/05/17/linvkey/debugging%20by%20vscode/","tags":[["node.js","/tags/node-js/"],["vscode","/tags/vscode/"]],"categories":[["undefined",""]],"content":"描述： ​ 先利其器粮草行，最近在学习node，为了在以后的开发过程中减少吃瘪，现在来看看在vscode中如何调试node代码。 具体操作： vscode打开node项目点击左侧调试按钮 点击Run and Debug 选择nodejs语言 点击设置按钮添加配置 5.更改lanuch.json配置文件 添加自己的项目启动脚本文件和配置 再次点击断点调试按钮启动断点调试 直接点击启动程序启动断点调试 直接在代码左侧需要断点的位置打个断点标记，执行方法是会自动出发断点 然后通过上面的调试按钮一步步断点 鼠标悬浮还可以看到断点的数据 当然也可在debug console控制台输出断点数据的结果 相当于浏览器断点是的console控制台 如果要结束断点直接点击上面的暂停键 上述就是vscode调试node代码的步骤 亲测有效，奔走相告！"},{"title":"axios响应拦截器错误处理及思想","date":"2021-05-16T16:00:00.000Z","url":"/2021/05/17/sunyifang/axios-response/","tags":[["微信小程序","/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"]],"categories":[["undefined",""]],"content":"axios的拦截器分为两部分（以后源码还是要读的） 服务器状态为300以下 服务器状态为300+ 服务器状态为300以下走response拦截器在其中判断，刨析res.code来判断 服务器状态为300+走ERROR 这里会直接返回一个error对象（error对象比较特殊但是也可以（.））如果想在拦截器中处理就要用error.response即可打印http数据包不过一般都是直接返回catch单一处理问题 "},{"title":"关于node的基础学习","date":"2021-05-15T16:00:00.000Z","url":"/2021/05/16/linvkey/about%20the%20basics%20of%20node/","tags":[["JavaScript","/tags/JavaScript/"],["node.js","/tags/node-js/"],["http","/tags/http/"]],"categories":[["undefined",""]],"content":"1.说明 客户端到服务器发送的请求取决于用户的网速 服务器到客户端的响应速度可以提升服务器的带宽 服务器的代码逻辑精简可以提升客户端的响应速度 致命在于服务器读写数据库的速度（IO） node是单线程 目的用Js编写高性能服务器 2.安装及运行 在nodejs.org下载完node之后 在自己的盘符里新建一个js文件(里面可以输入console.log(123))，然后打开同级命令行窗口 运行 node 文件.js 3.初始化项目 然后填写一些配置信息，然后会生成一个package.json配置文件 4.安装插件 5.卸载插件 6.查看环境变量 开发环境 生产环境 7.Node中的模块 7.1全局模块： 任何时候都能访问，不需要引用 7.2系统模块 7.2.1定义：要引用 7.2.2path:用于处理文件路径和目录路径的实用工具 第一个打印到最后的目录，第二个打印到1.jpg，最后一个打印出文件的后缀名 想获取一个文件的绝对路径，打印 path.resolve(__dirname,”文件名”) 7.2.3 fs用于文件读写操作 语法： 在同级目录下新建文件 b.text 写 追加内容 7.3自定义模块 定义：require自己封装的模块 exports module.exports require 前两个为导出，第三个是引用 7.3.1exports单个导出 7.3.2module.exports以对象的形式多个导出，也可以导出方法 调用方法 7.3.3require 1.如果有路径就访问路径的内容 2.如果没有指定路径，就默认访问node_modules文件夹 最后再去node的安装目录里找 7.3.4 http模块 服务器对象： 可以快速搭建服务器 例子： 先引用http对象，再调用createServer方法，并且要给出监听的自定义端口号 在相同目录下运行 node 对应的脚本文件 打开浏览器访问端口  此时在终端就会看到打印的内容 createServer中函数的参数(require,response) request 是请求时携带的参数 response是请求后返回的数据 别忘了在结尾加上end()方法表示请求的内容结束了 搭建简易服务器并访问 response.writeHead访问后返回的状态码 8.get与post js中 html页面 运行node index 手动打开h5页面 输入账密后得出结果 如果要获取这一长串中的url或者想要别的部分，在node中可以不用split方法这么麻烦 只需要导入url 模块 然后将请求的url作为第一个参数给url.parse来解析，就能得到表单请求时获取的url对象 查看打印效果 url.parse()的第二个参数 为布尔值，作用是将query属性的值变成对象，方便取值 "},{"title":"JavaScript常用代码片段","date":"2021-05-14T16:00:00.000Z","url":"/2021/05/15/sicker/javascript%20code%20snippet/","tags":[["JavaScript","/tags/JavaScript/"]],"categories":[["undefined",""]],"content":"获取前一天、后一天 日期 farmat (内含补零方法) 返回n个重复相同的字符串 判断空对象 补零 字符串转对象 扩展阅读：JSON.parse方法是如何工作的？"},{"title":"oauth2简单理解","date":"2021-05-13T16:00:00.000Z","url":"/2021/05/14/WH/oauth2/","tags":[["Java","/tags/Java/"]],"categories":[["undefined",""]],"content":"描述oauth2简单理解与实现 思路 资源服务器生成一个对应的appkey(公钥)与appsecret(私钥)，并下发给应用 应用服务器保存公钥与私钥，每次请求前使用私钥对参数进行一个签名 在请求资源服务器时带上请求的参数、签名与公钥 资源服务器根据接收到的公钥查询对应的私钥 资源服务器根据私钥对参数进行与应用一致的签名来验证俩次签名是否一致 思路 每次请求带上四个固定参数 timestamp 请求的时候的时间戳 —– 超过请求时间戳5分种之后的请求默认不处理 sign 签名 —– 使用私钥对参数进行签名之后得到 appKey 应用的key —– 与私钥是对应的，在私钥不参与传递的情况使资源服务器知道使用哪个私钥对参数进行签名 method 请求的资源名称 —– 每个资源有对应的资源名称 示例 将参数名称进行排序 将参数以键值对的形式生成一个字符串 在字符串的前面加上私钥与method，最后也加上一个私钥 进行sha&#x2F;md5排序签名 备注：具体的签名方式根据情况而定，此处提供一个思路"},{"title":"对Feign返回服务器状态码的处理","date":"2021-05-12T16:00:00.000Z","url":"/2021/05/13/WH/server%20code/","tags":[["Java","/tags/Java/"]],"categories":[["undefined",""]],"content":"问题描述在前端请求后端接口时，后端返回的返回类的code为500或其他的，而服务器返回的状态全为200。导致于前端每次都要在200中判断code。 如下图所示 解决方案思路 使用spring ResponseEntity处理 返回的状态码与返回的信息 使用ResultPackageToString工具类对service层抓取返回的code 根据返回的code返回对应的服务器状态码与信息 代码 工具类"},{"title":"群辉部署rap2流程详解与踩坑","date":"2021-05-10T16:00:00.000Z","url":"/2021/05/11/sicker/how%20to%20install%20rap2%20on%20synology%20nas/","tags":[["Synology","/tags/Synology/"],["rap2","/tags/rap2/"]],"categories":[["undefined",""]],"content":" 公司今天打算弃用 apidoc ，而转向淘宝的 rap2 ，因为考虑文档的敏感性，最佳方案肯定是装在现有的群辉 NAS 上。 成功后来复盘做一记录 首先，我们打开项目地址， rap2-delos: 后端服务器仓库 rap2-dolores: 前端 React 项目仓库 因为我这边采用群辉的 NAS ，那么通过 docker 显然更佳： 不怕污染环境，造成一些不可预计的错误 群辉套件中心可以方便的安装 docker 如果出现问题，可以方便的使用 NAS 的可视化界面，轻松重启。:::centerdocker 操作界面::: ::: danger 注意docker 安装过程略，请自行确保安装成功::: 所以，我们跟着 rap2-delos 的 README[^read] 直接进入主题[^read]: rap2-delos 的 readme 接着，就直接下载 Dockerfile.yaml ，下载后，为了省事，可以选择跟笔者一样，通过 NAS 可视化界面直接上传到方便找到的位置。 :::details 点击查看 Dockerfile.yaml 文件 ::: 接着，随着下面图片的指引，打开 NAS 的 ssh 端口 现在，我们就可以直接使用终端工具，连接到我们的 NAS 上了。 ::: info终端工具请自行下载，笔者采用的是 xshell::: 登录成功后，会提示类似如下的界面 键入 验证 docker 是否安装成功。 如成功了，就可以去找到刚才上传 Dockerfile.yaml 文件。 找到后，在该路径直接键入 如若安装成功，应可以看到 一排类似 Creating rap_mysql_1 ... done 的提示语句。 此时，可以键入 看到这 4 个项目起来啦，就说明成功啦！ 但，也别高兴的太早，我们还差最后一步。参见文档，也可以看到。第一次运行需要手动初始化mysql数据库。最后，键入 大功告成！现在打开你的 $&#123;NAS IP&#125;:3000 查看吧！ 如果你还是没成功，也许，你需要接着往下看 Issues [ERROR] [Entrypoint]: MYSQL_USER&#x3D;”root”, MYSQL_USER and MYSQL_PASSWORD are for configuring a regular user and cannot be used for the root user::: details 点开查看详细报错信息&#123;7,9&#125; ::: 此解决方案就已经在报错中给予了提示。可以查看上述完整错误代码高亮处。大致翻译下来就是 MYSQL_USER 和 MYSQL_PASSWORD 用于配置常规用户，不能用于 root 用户,删除 MYSQL_USER=&quot;root&quot; 。 所以，让我们回头简单修改下 Dockerfile.yaml:64 ,将 MYSQL_USER: &quot;root&quot; 前加一个 # ，即 接着重新运行 mysql 5.7 启动后闪退 同上 运行数据库初始化报错 同上"},{"title":"动态代理（含基础代码）","date":"2021-05-07T16:00:00.000Z","url":"/2021/05/08/MTF/JDK_AOP/","tags":[["Java","/tags/Java/"]],"categories":[["undefined",""]],"content":" 刚开始是为了解决实体类过多而想尝试创建动态实体类··· 一般动态代理是加载service层与dao层之间，用来有效控制对委托类对象的直接访问，也可以很好地隐藏和保护委托类对象（我不懂啥保护隐藏，我就是想让它自动创建实体类，或者通过父类去引导至实体类层），动态代理的底层实现逻辑大概就是···读写本地文本文件后将文件进行编译再运行实现的··· 编译java类方法 运行java类方法 动态代理的底层就是编译运行动态java文件（感觉动态实体类指日可待了啊） 动态代理目前了解到的几种方式：1、JDK动态代理2、CGLIB动态代理最近接触到的框架那就是springboot，简单粗暴，内置org.springframework.cglib包，直接能用第二种···所以···走起（以下代码为转载···亲测可用） 第一步：创建DynamicBean 实体类 第二步：创建映射类，用来生成动态bean 第三步：增添属性值： 这样动态实体类就可以使用了 然而···然而···有啥用呢？？？不同的service都需要请求不同的dao层，然而不同的dao层要通过这一个方法来改变这一个实体类···冲突是必然的，除非依然根据service来创建不同的实体类层···无非就是不用一遍遍删改里面的属性了···用list&lt;object[]&gt;不也很香？？？(&#x2F;“≡ _ ≡)&#x2F;┴┴ (&#x2F;“≡ _ ≡)&#x2F;┴┴ (&#x2F;“≡ _ ≡)&#x2F;~┴┴ "},{"title":"关于get请求和post请求","date":"2021-05-06T16:00:00.000Z","url":"/2021/05/07/linvkey/get%20and%20post/","tags":[["JavaScript","/tags/JavaScript/"],["Vue","/tags/Vue/"],["http","/tags/http/"]],"categories":[["undefined",""]],"content":"get和post请求的参数格式学习的路上，该踩的坑还是要踩的，再小的问题踩完就记录下来，让自己涨涨记性。 在做后台系统的项目中每次遇到请求数据时都想当然的以为参数的格式都一样，其实对于get和post请求时的参数格式是不一样的 &#x2F;&#x2F;1.get请求 &#x2F;&#x2F;2.post请求 如果请求成功，res就是从后端获取的数据合集 get和post的一些区别 get在浏览器回退时不受影响而post会再次出发请求 get请求会被浏览器自动缓存(cache)，而post不会但可以手动设置 get请求只支持URL编码，而post支持多种编码( application&#x2F;x-www-form-urlencoded如果表单的 enctype 属性不设置则post默认以这种方式编码， multipart&#x2F;form-data使用form表单上传文件时设置enctype 为这个属性即可，这种编码方式对各大服务端语言有着良好的支持， application&#x2F;json这种编码方式大都用作请求头来告诉后端消息主体是序列化后的 JSON 字符串 ， text&#x2F;xml 这是一种使用 HTTP 作为传输协议的编码方式是远程调用规范能很好的支持已有的 XML-RPC 服务 ) 使用get而产生的URL地址可以被Bookmark书签记录(再次访问之前访问的位置中间的一系列环节都可以略过)，而post不可以 get请求参数会被完整保留在浏览器历史记录里，而post中的参数不会被保留 get请求在URL中传送的参数是有长度限制的，而post没有限制 对参数的数据类型，get只接受ASCII字符，而post没有限制 get比post更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息 其实网络请求http的底层是 TCP&#x2F;IP，而get和post的底层也是 TCP&#x2F;IP ，换言之它们都是通过TCP链接的，所以它们能做的事也是一样的，如果给get加上request,给post加上url参数，在技术上是行得通的。 小故事 其实在万维网中， TCP就像轮船，我们用TCP来运输数据，它从不会丢失数据因此非常可靠。但是当所有运输数据的轮船都长得一模一样的时候就分不清谁是谁了。所以交通规则http就诞生了，它给轮船在运输时设定了几种服务区， 有get, post, put, delete等等 。http规定每当轮船要行使get服务区时，要给在船身贴上get标签( 设置method为get ),而且要求把数据放在最显眼的甲板位置(url中)，如果要行使post服务区,就要在船身贴上post标签并且把数据放在船舱中，当然你在get服务区时也可以将数据不放在甲板，偷偷藏点放在船舱也行，虽然这样很不好。也可以傻傻在post服务区把数据放在甲板。毕竟http只负责开通服务区(get, post, put, delete等等)，轮船(TCP)才是主导数据究竟是按哪种方式传输的。 而在万维网中还有一个重要的角色运输公司( 不同的浏览器（发起http请求）和服务器（接受http请求）就是不同的运输公司 )， 你可以在甲板上无限的堆货物（url中无限加参数）。但是运输公司可不傻，装货和卸货也是有很大成本的，他们会限制单次运输量来控制风险，数据量太大对浏览器和服务器都是很大负担。 业界不成文的规定是，大多数浏览器通常都会限制url长度在2K个字节，而（大多数）服务器最多处理64K大小的url。超过的部分，恕不处理。 如果你用GET服务，在request body偷偷藏了数据，不同服务器的处理方式也是不同的，有些服务器会帮你卸货，读出数据，有些服务器直接忽略，所以，虽然get可以带request body，也不能保证一定能被接收到。 所以get和post本质上就是TCP链接，并无差别。但是由于HTTP的规定和浏览器&#x2F;服务器的限制，导致他们在应用过程中体现出一些不同。 结尾剧情反转 get和post还有一个重大区别: get产生一个TCP数据包；post产生两个TCP数据包。 对于get方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）； 而对于post，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok（返回数据）。 也就是说使用get服务区，轮船只需要走一趟，而要使用post服务区，轮船要先去打一次招呼说我要走post服务区了，你安排一下，然后才会运货。 据研究，在网络环境好的情况下，发一次包的时间和发两次包的时间差别基本可以无视。而在网络环境差的情况下，两次包的TCP在验证数据包完整性上，有非常大的优点。 也并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次。 亲测有效，奔走相告！"},{"title":"Webpack 循环依赖的问题 Error:Cyclic dependency","date":"2021-05-06T16:00:00.000Z","url":"/2021/05/07/sicker/resolve%20webpack%20error%20cyclic%20dependency/","tags":[["vuepress","/tags/vuepress/"],["webpack","/tags/webpack/"]],"categories":[["undefined",""]],"content":"错误代码 当我键入 npm list toposort 时，可以看到如下的结果 &#123;5&#125; 可以看到该 package 被 vuepress-html-webpack-plugin 所依赖 经过查询，可以看到在 toposort 的 issue[^is] 中给出了解决方案 按照这个思路尝试打开 /node_modules/vuepress-html-webpack-plugin/index.js:33 将 chunksSortMode 修改为 none 重新启动后，问题解决了。 但是！ 没错！ 这样不够优雅。 从 vuepress 官方配置文档中可以找到关于修改 wepack 的章节^docs 我们依样在 config.js 中添加 至此，问题的得到了优雅的解决。 [^is]: Cyclic dependency error"},{"title":"vue中关于mixin的使用","date":"2021-05-06T16:00:00.000Z","url":"/2021/05/07/sicker/vue%20mixin/","tags":[["Vue","/tags/Vue/"]],"categories":[["undefined",""]],"content":":::info代码就是最好的语言，废话不多说，我们直接看示例:::mixin.vue ..&#x2F;mixin&#x2F;mixin.js 运行结果 再解析一下： 当引入的 mixin 中与当前组件同时存在同样的方法和属性时，将不会报错，当前组件的属性方法将覆盖混入中的 混入与当前组件的生命周期分别执行，同周期先行执行混入中的，不同周期按先后顺序执行 混入与当前组件能相互读取操作的对方的属性与方法 "},{"title":"vuepress中文标签或其他路径引发的404问题","date":"2021-05-05T16:00:00.000Z","url":"/2021/05/06/sicker/support%20chinese%20tags%20on%20vuepress/","tags":[["vuepress","/tags/vuepress/"],["插件","/tags/%E6%8F%92%E4%BB%B6/"]],"categories":[["undefined",""]],"content":"这个问题其实已然不新鲜了，主要源于浏览器对直接输入的中文 url 做了一次 encode 导致 匹配不到 vue-router 对应的 path 要解决这个问题，可以参照 Pull requests [^github] [^github]: Support filename that contains non-ASCII and unicode chars 有了这层思路，问题也就不难得到解决。 方法1：纠正 router 的跳转 因为 vuepress 的机制问题，没有匹配到 layout 的 markdown 文件，最终会自动导向 404.vue 或者 NotFound.vue 。了解到这层后，我们可以直接在导向的终点对其进行操作。 ::: tipthis.$author._metaMap 与 this.$tag._metaMap 来源于 config.js 中的 frontmatters ； 参照 frontmatter-classifier::: 方法2：对 url 进行 decode "},{"title":"Vue高德地图api使用指南（动态渲染信息窗体）","date":"2021-05-05T16:00:00.000Z","url":"/2021/05/06/sunyifang/gaodeMap/","tags":[["JavaScript","/tags/JavaScript/"],["Vue","/tags/Vue/"],["gaode-jsapi","/tags/gaode-jsapi/"]],"categories":[["undefined",""]],"content":"**项目中用到了高德地图API，写完后感觉功能&#x2F;结构都很散乱，自己整理一下留以备用 ** 地图动态渲染样式（卡片内容可自定义） 地图API的引入直接采用古老的方式index.heml中引入jsindex.html 在plugin中可以直接引入一些api（后续介绍动态引入方式） 使用高德地图控件因为使用方式大同小异这里仅介绍一种动态渲染的api 首先需要创建一个map对象创建map后加入地图视野、模式、角度等参数。 使用infowindow因为需要不断循环所以要在定时器中进行操作注意这里要在一个能访问到数据及map的作用域中卡片信息为jsx写法步骤分为显示卡片、打开信息窗体、循环判断、关闭上一卡片 异步加载插件方法 具体JSAPI需要查看官方文档高德地图API官方文档高德地图在线调试文档"},{"title":"Vue绑定键盘按键并触发事件","date":"2021-04-28T16:00:00.000Z","url":"/2021/04/29/linvkey/vue%20binds%20keyboard%20event/","tags":[["JavaScript","/tags/JavaScript/"],["Vue","/tags/Vue/"]],"categories":[["undefined",""]],"content":" 在Vue中绑定键盘按键，并触发事件 问题描述： 在做项目的时候遇到 使用键盘的左右键来翻页的功能，一开始想当然的使用JS的绑定键盘事件发现并不好用 在Vue中要借用$nextTick来处理一下 左右键分别是37和39 附加：键盘对应的键码值 ::: center 表一 表二 表三 表四::: 亲测有效，奔走相告！"},{"title":"vue-element-admin的使用总结","date":"2021-04-28T16:00:00.000Z","url":"/2021/04/29/linvkey/vue-element-admin/","tags":[["JavaScript","/tags/JavaScript/"],["Vue","/tags/Vue/"]],"categories":[["undefined",""]],"content":" 关于后台系统这一块，一直用的都是vue-element-admin，这一套模板是基于 vue 和 element-ui实现的，动态路由，权限验证，提炼了典型的业务模型，提供了丰富的功能组件，它可以帮助你快速搭建企业级中后台产品原型。 文件1-user.js 登录登出在src目录下的api文件夹中会用到user.js user.js中有三个方法，分别是 login登录方法， getInfo获取登录信息的方法， 以及logout登出的方法 它们是基于utils&#x2F;request.js文件的 文件2-request.js设置baseURL在utils&#x2F;request.js这个文件中需要注意 2.1 第一个红框对应的文件是baseURL env.development和.env.production 它对应的文件是项目根目录下的 .env.development和.env.production 这两个文件中 唯一的区别就是 一个对应上线，一个对应开发 而VUE_APP_BASE_API熟不熟悉？ 是的，就是文件2-utils&#x2F;request.js文件中的第一个红框 用于配置baseURL的 VUE_APP_BASE_API &#x3D; “路径值” 路径值就是后端给的baseURL 2.2 第二个红框 是在请求拦截器中 给请求投添加token 注意这个 “X-Token” 是可以和后端商量配合前端来命名的 2.3 这个状态码，框架里给的是20000 而后端返回的大都是200所以要自己改一下 文件3-auth.js设置token在utils&#x2F;auth.js这个文件中需要注意 这个项目用的是cookie来存储token 我在做项目的过程中使用同一个名字 TokenKey（当时都叫token） 结果出现一个项目登录之后，另一个项目无法登录的情况 所以在utils&#x2F;auth.js这个文件中最好还是改一下 TokenKey 比较好 文件4-get-page-title.js设置标题在utils&#x2F;get-page-title.js这个文件中需要注意 这个文件是设置网页标题的 而具体设置是在红框处，按住ctrl键 点进去 就可以修改网页标题了 文件5-在layout中的components中的Sidebar中的Logo.vue文件把data中的数据改掉，以防日后出现 文件6-在layout中的components中AppMain.vuetransition标签的name属性，默认提供了fade和fade-transform两个转场动画 但是没啥区别 文件7-在layout中的components中Navbar.vue可以设置下拉 这里注释掉还剩最后一个退出按钮 文件8-router在src的router文件夹的index.js中 有两种路由， 一种是不需要权限，所有人都能访问的页面constantRoutes 一种是需要权限，必须是指定的角色才能访问的页面asyncRoutes constantRoutes无需权限的路由配置 asyncRoutes需要权限的路由配置 文件9-store在store&#x2F;modules&#x2F;user.js这个文件中需要注意 在定义的actions里有三个方法分别对应api&#x2F;user.js下的 login登录方法， getInfo获取登录信息的方法， 以及logout登出的方法。 1.login登录方法： 这里需要修改红框处，由后端返回的账号密码两个字段，（有的时候，第二行结构赋值出的username和password也需要改成后端返回的账号密码字段） 2.getInfo获取登录信息的方法： 在登录时后端一般会返回三个常用的值，分别是昵称，头像和token token在login登录方法已经保存了 这里保存的是昵称和头像 3.登出方法 4.消除token方法 这里不需要修改 文件10-view这个文件夹是存放页面的 要注意的有404页面和login页面 404页面只要注意到模板框架会有广告性的文字，改掉即可 在login页面 有 1.标题要修改 2.登录表单的校验规则 还要留意handleLogin登录事件 文件11-axios只需要保证请求头中的X-Token和后端一致就行了 文件12-main.js在main.js中 1.配置axios 2.设置全局样式类 3.定义自定义的过滤器用于更改字符格式 封装方法1.统一在项目的src的api文件夹下 创建JS文件 第一步就要引入 import request from &#39;@/utils/request&#39; 然后导出方法 我这里封装的方法需要三个参数 2.使用 亲测有效，奔走相告！"},{"title":"vuepress 动态更换壁纸方案","date":"2021-04-28T16:00:00.000Z","url":"/2021/04/29/sicker/random%20wallpaper%20for%20vuepress/","tags":[["vuepress","/tags/vuepress/"],["插件","/tags/%E6%8F%92%E4%BB%B6/"]],"categories":[["undefined",""]],"content":"直接贴代码啦。 在合适位置插入 可以看到，这跟本站更换任意配色的组件是一个套路~ 扩展阅读：vuepress&#x2F;vue动态更换配色方案"},{"title":"vue常用代码片段","date":"2021-04-28T16:00:00.000Z","url":"/2021/04/29/sicker/vue%20code%20snippet/","tags":[["Vue","/tags/Vue/"]],"categories":[["undefined",""]],"content":"跳转路由时返回顶部 修改当前页面title 子组件向父组件传参父组件 子组件 ..&#x2F;components&#x2F;Text.vue 动态组件父组件 动态组件 checkbox 示例 mixin 推荐阅读：vue mixin 扩展阅读vue 文档速查"},{"title":"前端学习笔记","date":"2021-04-27T16:00:00.000Z","url":"/2021/04/28/XBlack/front-end%20learning%20notes/","tags":[["HTML","/tags/HTML/"]],"categories":[["undefined",""]],"content":"html 基本结构 html标签是由&lt;&gt;包围的关键词 html标签通常成对出现，分为标签开头和标签结尾 有部分标签是没有结束标签的，为单标签，单标签必须使用/结尾 页面所有的内容，都在html标签中 html标签分为三部分:标签名称，标签内容，标签属性 html标签具有语义化，可通过标签名能够判断出该标签的内容，语义化的作用是网页结构层次更清晰，更容易被搜索引擎收录，更容易让屏幕阅读器读出网页内容 标签的内容是在一对标签内部的内容 标签的内容可以是其他标签 标签属性 class属性:用于定义元素的类名 id属性:用于指定元素的唯一id，该属性的值在整个html文档中具有唯一性 style属性:用于指定元素的行内样式，使用该属性后将会覆盖任何全局的样式设定 title属性:用于指定元素的额外信息 accesskey属性:用于指定激活元素的快捷键 tabindex属性:用于指定元素在tab键下的次序 dir属性:用于指定元素中内容的文本方向，属性只有ltr或rtl两种 lang属性:用于指定元素内容的语言 文本标签 段落标签:&lt;p&gt;&lt;/p&gt;，段落标签用来描述一段文字 标题标签:&lt;hx&gt;&lt;/hx&gt;，标题标签用来描述一个标题，标题标签总共有六个级别，&lt;h1&gt;&lt;/h1&gt;标签在每个页面中通常只出现一次 强调语句标签:&lt;em&gt;&lt;/em&gt;，用于强调某些文字的重要性 更加强调标签:&lt;strong&gt;&lt;/strong&gt;和&lt;em&gt;标签一样，用于强调文本，但它强调的程度更强一些 无语义标签:&lt;span&gt;&lt;/span&gt;，标签是没有语义的 短文本引用标签:&lt;q&gt;&lt;/q&gt;，简短文字的引用 长文本引用标签&lt;blockquote&gt;&lt;/blockquote&gt;，定义长的文本引用 换行标签:&lt;br/&gt; 多媒体标签 链接标签:&lt;a&gt;&lt;/a&gt; 图片标签:&lt;img/&gt; 视频标签:&lt;video&gt;&lt;/video&gt; 音频标签:&lt;audio&gt;&lt;/audio&gt; 列表 无序列表标签:&lt;ul&gt;&lt;/ul&gt;列表定义一个无序列表，&lt;li&gt;&lt;/li&gt;代表无需列表中的每一个元素 有序列表:&lt;ol&gt;&lt;/ol&gt;列表定义一个有序列表,&lt;li&gt;&lt;/li&gt;代表无需列表中的每一个元素 定义列表:&lt;dl&gt;&lt;/dl&gt;，定义列表通常和&lt;dt&gt;&lt;/dt&gt;和&lt;dd&gt;&lt;/dd&gt;标签一起使用 表格 表格标签:&lt;table&gt;&lt;/table&gt; 表格的一行:&lt;tr&gt;&lt;/tr&gt; 表格的表头:&lt;th&gt;&lt;/th&gt; 单元格:&lt;td&gt;&lt;/td&gt; 表格合并:同一行内，合并几列colspan=&quot;2&quot;，同一列内，合并几行rowspan=&quot;3&quot; 表单标签 1.标单标签&lt;form&gt; &lt;form&gt;&lt;/form&gt;表单是可以把浏览者输入的数据传送到服务器端，这样服务器端程序就可以处理表单传送过来的数据信息:&lt;form method=&quot;传送方式&quot; action=&quot;服务器文件&quot;&gt; method:浏览者输入的数据被传送到的地方 action:数据传输的方式 2.输入标签&lt;input&gt; name:为文本框命名，用于提交表单，后台接收数据用 value:为文本输入框设置默认值。 type:通过定义不同的type类型，input的功能有所不同 button按钮: 我是Button按钮 select下拉选择框: 请选择... 选择1 选择2 选择3 3.文本域: cols:规定文本区内的可见宽度 rows:规定文本区内的可见行数 其他语义化标签 盒子:&lt;div&gt;&lt;/div&gt; 导航:&lt;nav&gt;&lt;/nav&gt;，html5新增语义化标签，定义一个导航，主要用于布局，分割页面的结构 时间标签:&lt;time&gt;&lt;/time&gt;，语义化标签，定义一个时间 侧边栏:&lt;aside&gt;&lt;/aside&gt;，语义化标签，定义主题内容外的信息，主要用于布局，分割页面的结构 网页头部:&lt;header&gt;&lt;/header&gt;，html5新增语义化标签，定义网页的头部，主要用于布局，分割页面的结构 底部信息:&lt;footer&gt;&lt;/footer&gt;，html5新增语义化标签，定义网页的底部，主要用于布局，分割页面的结构 文章:&lt;article&gt;&lt;/article&gt;，html5新增语义化标签，定义一篇文章，主要用于布局，分割页面的结构"},{"title":"yarn全局安装后无法使用命令","date":"2021-04-27T16:00:00.000Z","url":"/2021/04/28/sicker/global%20add%20does%20not%20work%20by%20yarn/","tags":[["yarn","/tags/yarn/"]],"categories":[["undefined",""]],"content":" yarn全局安装后无法使用命令，但npm -g却可以，这是为什么呢？ 首先通过 npm help 与 yarn --help 很容易能尝试得出全局安装的路径与命令的路径。 看到这里，很多有过后端语言基础的朋友应该就已经明白了。 没错，接着，打开资源管理器， ::: center点击图片可以放大哦~::: 跟着如上操作一图流，可以看到 npm 的 bin 路径已然配置在了 path 中，那么是否将 yarn 的 bin 也配置好就OK了呢？ done！ 你学废了吗？"},{"title":"如何在国内一键安装electron","date":"2021-04-27T16:00:00.000Z","url":"/2021/04/28/sicker/how%20to%20install%20electron/","tags":[["electron","/tags/electron/"]],"categories":[["undefined",""]],"content":" electron 安装超时真的很烦，虽然可以自行下载压缩包绕过，但实在不够优雅。 那么如何才能优雅的安装 electron 呢？ 要解决先要分析原因； 首先先来看一下报错信息。 &#123;3&#125; 从日志高亮处，我们可以得出，这是一个连接超时的问题。 链接超时，显而易见。不是因为墙就是连接速度不济所引发。而多次尝试肯定是跟优雅不着边的，那么剩下的自然是解决墙的问题。 被「你怕吗」折腾过的同学肯定要抢答了，「用淘宝镜像呗」 没错，所以下属方法其实也就是围绕解决墙问题而展开罢了。 首先找到 npm 的本地配置路径 仔细找找，可以找到 .npmrc 相关的条目，打开该路径的文件。 千万别客气，把以下配置通通加进去 ELECTRON_MIRROR&#x3D; 什么？你说你没有找到？ 那只能麻烦你一条条添加啦 最后验证下 最后安装成功后，运行 electron。 好了，感谢淘宝吧！ issues 别再用 electron-rebuild 了 否则，安装的版本为 1.4.13 … 想必你也不想用远古版本的吧？ 提示安装失败后，再次安装提示 文件已存在 移除 npm -g bin 路径已存在的如上图选中的三个文件后重试"},{"title":"Java环境部署-Windows","date":"2021-04-26T16:00:00.000Z","url":"/2021/04/27/XBlack/java%20environment%20deployment/","tags":[["Java","/tags/Java/"]],"categories":[["undefined",""]],"content":"1.下载Java​ Java下载，点击连接后找到Java SE Development Kit 8u291栏目下,根据自己电脑操作系统来选择Product &#x2F; File Description ​ 文件下载完成后，只要记住这个图标就行了，名字不一样也没有问题，只是软件的版本问题 2.安装Java​ 双击该款软件并安装 ​ 中间可能让你选择安装路径，我的建议默认安装不要修改安装路径，安装一直点击下一步就可以了。 ​ 等待安装 ​ Java安装完成 ​ 如果你是默认安装的你的Java文件在这个路径 3.配置环境​ 选择我的电脑右键，点击属性，进入你的电脑信息界面，点击关于， 找到并点击高级系统设置 ​ 找到并点击环境变量 ​ 我之前安装过Java版本较低，所以你到的信息与我不同，这都没有关系 ​ 我们要在系统变量中要新建或者编辑下面3个变量分别是：JAVA_HOME、CLASSPATH、Path ​ 新建变量名：JAVA_HOME ​ 变量值：C:\\Program Files\\Java\\jdk1.8.0_101（如果是默认安装的就去） ​ 变量名：CLASSPATH ​ 变量值：**.;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar;** ​ 变量名：Path ​ 变量值：**%JAVA_HOME%\\bin**； ​ %JAVA_HOME%\\jre\\bin； 这时我们环境配置也完成了，看看能不能正常运行 我们这时用快捷键Windows+R进入管理员命令窗口，在输入框内输入cmd 点击确定 我们分别输入Java -version（Java后面要有空格） 输入Java 输入 Javac ​ 这时软件运行环境部署阶段全部完成！！！"},{"title":"JMeter环境配置-Windows","date":"2021-04-26T16:00:00.000Z","url":"/2021/04/27/XBlack/jmeter%20environment/","tags":[["JMeter","/tags/JMeter/"]],"categories":[["undefined",""]],"content":"1 JMeter 介绍​ Apache JMeter是100%纯JAVA桌面应用程序，被设计为用于测试客户端&#x2F;服务端结构的软件(例如web应用程序)。它可以用来测试静态和动态资源的性能，例如：静态文件，Java Servlet,CGI Scripts,Java Object,数据库和FTP服务器等等。JMeter可用于模拟大量负载来测试一台服务器，网络或者对象的健壮性或者分析不同负载下的整体性能。 同时，JMeter可以帮助你对你的应用程序进行回归测试。通过你创建的测试脚本和assertions来验证你的程序返回了所期待的值。为了更高的适应性，JMeter允许调用二次开发的jar包来丰富你的测试场景；JMeter允许你使用正则表达式来创建这些assertions. 2 下载安装2.1 JMeter安装​ 2.1.1 JMeter下载，解压文件到目标目录 ​ 2.1.2 JMeter可以运行在如下操作系统上：Unix，Windows和Open VMS ​ 2.1.3 应当避免jdk路径与jmeter路径有中文和空格，否则会有异常,也会导致远程测试出现问题 2.2 环境配置​ 2.2.1 系统要求：JMeter需要JDK1.6以上的版本支持运行 ​ 2.2.2 在运行JMeter前，查看电脑中是否已经配置Java环境，“打开命令窗口-&gt;输入java -version”,如果如下图示说明该电脑已经有Java环境 ​ 2.2.3 Java环境配置 ​ 2.2.4 JMeter环境配置 ​ 2.2.4.1 将下载完成的JMeter放入目标目录下 ​ 2.2.4.2 我的电脑-&gt;鼠标右键菜单-&gt;属性–&gt;高级系统设置-&gt;环境变量； ​ 在系统变量中添加属性：JMETER_HOME ​ 变量名：JMETER_HOME ​ 变量值：根据自己将JMeter软件存放的路径复制一下，粘贴到变量值中，点击确定就好了 ​ 在系统变量中编辑属性：Path ​ 变量名：Path ​ 变量值：%JMETER_HOME%\\bin(可以直接把我这一段变量值复制一下，粘贴到你们变量值中)，点击确定就好了 2.3 JMeter插件安装​ 2.3.1 插件下载 ​ 2.3.2 插件下载完成后，将JMeterPlugins-Extras.jar，放到apache-jmeter-(JMeter版本号)\\lib\\ext目录 2.4 运行JMeter​ 2.4.1 第一种打开运行方式 找到你安装JMeter的安装目录，点击apache-jmeter-(JMeter版本号)\\bin文件架下的jmeter.bat文件（如果文件名称有后缀，请忽视；如果没有文件名称后缀：先点击查看，在文件扩展名上打钩，后缀名称就显示出来了） ​ 双击jmeter.bat文件,会先打开一个命令行窗口，在打开JMeter软件窗口（不能因为命令行窗口恶心，就直接点击关闭，这样你JMeter软件也会关闭，点击最小化后就可以了，我们就可以正常使用JMeter软件） 2.4.2 第二种打开运行方式 ​ 找到你安装JMeter的安装目录，点击apache-jmeter-(JMeter版本号)\\bin文件架下的ApacheJMeter.bat文件（如果文件名称有后缀，请忽视；如果没有文件名称后缀：先点击查看，在文件扩展名上打钩，后缀名称就显示出来了） 备注：打开的时候会有只有一个窗口，JMeter的图形操作界面，和上边的不一样 3 JMeter目录结构解析3.1 根目录 Jmeter安装包解压后的根目录如下图: 3.2 根目录说明（由上到下） 初始文件目录 3.2.1 backups目录 3.2.2 bin 目录为可执行文件目录 3.2.3 docs目录 docs目录下的文件是JMeter的Java Docs,而printable_docs的usermanual子目录下的内容是JMeter的用户手册文档，其中component_reference.html是最常用到的核心元件帮助文档。该目录下存放的是jmeter官方文档的API文档，主要是用于二次开发 3.2.4 extras目录 该目录下的文件提供了对构建工具Ant的支持，可以使用Ant来实现测试自动化，例如批量脚本执行，产生HTML格式的报表，测试运行时，可以把测试数据记录下来，Jmeter会自动生成一个.jtl文件，将该文件放到extras目录下，运行“ant -Dtest&#x3D;文件名 report”，就可以生成测试统计报表。也可以用于持续集成 3.2.5 lib目录 3.2.6 licenses软件许可文件目录 3.2.7 printable_docs目录 3.2.8 LICENSE ——许可说明 3.2.9 NOTICE ——简单信息说明 3.2.10 README.md ——JMeter 官方基本介 4 JMeter主要配置文件4.1 jmeter.properties配置文件 4.2 SSL配置 4.3 JMeter 测试项目自动备份配置 4.4 远程主机配置 4.5 日志管理配置 4.6 设置输出报告模板格式 4.7 jmeter.bat 关键配置修改(这部分信息没有找到) 4.8 system.properties配置文件 4.9 user.properties配置文件"},{"title":"文档书写规范","date":"2021-04-26T16:00:00.000Z","url":"/2021/04/27/sicker/docs%20regulation/","tags":[["规范","/tags/%E8%A7%84%E8%8C%83/"]],"categories":[["undefined",""]],"content":"中英文之间需要增加空格正确： 在 LeanCloud 上，数据存储是围绕 AVObject 进行的。 错误： 在LeanCloud上，数据存储是围绕AVObject进行的。在 LeanCloud上，数据存储是围绕AVObject 进行的。 中文与数字之间需要增加空格正确： 今天出去买菜花了 5000 元。 错误： 今天出去买菜花了 5000元。今天出去买菜花了5000元。 数字与单位之间需要增加空格正确： 我家的光纤入屋宽带有 10 Gbps，SSD 一共有 20 TB 错误： 我家的光纤入屋宽带有 10Gbps，SSD 一共有 20TB 例外： 度 &#x2F; 百分比与数字之间不需要增加空格： 10% 、 30° 、 30℃ 加亮加粗斜体链接两侧增加空格正确： 请提交一个 issue 并分配给相关同事。我有一个 大 西瓜我有一个 大 西瓜我有一个 大 西瓜错误： 请提交一个issue并分配给相关同事。我有一个大西瓜我有一个 大 西瓜我有一个大西瓜 全角标点与其他字符之间不加空格正确： 刚刚买了一部 iPhone，好开心！ 错误： 刚刚买了一部 iPhone ，好开心！刚刚买了一部 iPhone， 好开心！ 不重复使用标点符号正确： 德国队竟然战胜了巴西队！她竟然对你说「喵」？！ 错误： 德国队竟然战胜了巴西队！！德国队竟然战胜了巴西队？？？！！！！ 正确使用半角和全角英文采用英文半角标点符号，中文采用中文全角标点符号（一般输入法只要指定中英文符号即可），数字采用半角字符 正确： 嗨！你好啊！核磁共振成像（NMRI）是什么原理都不知道？Stay hungry,stay foolish.145 错误： 嗨!你好啊！Stay hungry，stay foolish。１４５ 专有名词使用约定通用的大小写正确： GitHub、Microsoft Corporation、Google、Facebook, Inc. 错误： github、microsoft corporation、google、facebook, inc. 勿使用容易歧义或者未约定成俗的缩写正确： 我们需要一位熟悉 JavaScript、HTML5，至少理解一种框架（如 Backbone.js、AngularJS、React 等）的前端开发者。 错误： 我们需要一位熟悉 Js、h5，至少理解一种框架（如 backbone、angular、RJS 等）的 FED。 使用直角引号正确： 「老师，『有条不紊』的『紊』是什么意思？」 错误： “老师，‘有条不紊’的‘紊’是什么意思？” "},{"title":"如何在localStorage中存储布尔值","date":"2021-04-26T16:00:00.000Z","url":"/2021/04/27/sicker/how%20to%20save%20boolean%20fields%20to%20localstroage/","tags":[["JavaScript","/tags/JavaScript/"]],"categories":[["undefined",""]],"content":" localStorage存入取出后，会自动变成字符串类型，稍不注意容易导致一系列问题。如何优雅的存取布尔值呢？ 首先，我们先通过一段简单的代码来了解下它 ::: demo 看看 localStorage 做了些啥 ::: 从上述简单的示例中，我们可以看到。即便将 false 原本存储进 localstroage ，待再取出的时候自动变成了字符串的格式。 布尔值 false 变成了 字符串 “false”，如此一来，也使得再进行条件判断时出现了偏差。 &#x3D;&#x3D;知道了原由，我们也就能对症下药。避免存储时，传入 false ，问题也就迎刃而解。&#x3D;&#x3D; 思路1： if(null) 返回为 false 思路2： if(0) 返回为 false 思路3： if(“”) 返回为 false "},{"title":"根据数组中对象的属性来分组","date":"2021-04-25T16:00:00.000Z","url":"/2021/04/26/linvkey/grouping%20by%20attribute/","tags":[["JavaScript","/tags/JavaScript/"]],"categories":[["undefined",""]],"content":"例子如果获取到的数据格式是如下的 需要进行如下处理 打印的结果为 根据id来分组，将id值相同的分到同一个组里 亲测有效，奔走相告。"},{"title":"Jira学习01——应该掌握的词汇","date":"2021-04-25T16:00:00.000Z","url":"/2021/04/26/linvkey/the%20vocabulary%20of%20a/","tags":[["Jira","/tags/Jira/"]],"categories":[["undefined",""]],"content":"词汇记录issue (项目中跟踪的)问题 issueType 问题类型JIRA 系统可以用于跟踪多种不同类型的问题。系统管理员可以根据需要添加。New Feature 对系统提出的新功能Task 需要完成的任务Improvement 对现有系统功能的改进 Priority Levels 优先级在 JIRA 系统中用优先级来表示问题的严重级别，系统管理员可以在 JIRA 系统中添加优先级。Blocker 阻塞开发或测试的工作进度，或影响系统无法运行的错误Critical 系统崩溃，丢失数据或内存溢出等严重错误、或者必需完成的任务Major 主要的功能无效、新增功能建议Minor 功能部分无效或对现有系统的改进Trivial 拼写错误，文本未对齐等 Status 状态每个问题有一个状态，用来表明问题所处的阶段，问题通过开始于 open 状态，然后开始处理&#x2F;Progress，再到解决&#x2F;Resolved，然后被关闭&#x2F;Closed。根据情况的不同，您可以根据项目来定制问题状态以及工作流。 Resolutions 解决一个问题可以用多种方式解决，系统管理员是可以在 JIRA 系统中定制解决方式。Fixed 问题已经解决Won’t Fix 问题未解决 - 将不会解决的问题Duplicate 重复的问题Incomplete 问题描述得不够准确、完全Cannot Reproduce 问题重现失败，或者无足够的信息重现问题 项目项目版本发布&#x2F;released未发布&#x2F;unreleased归档&#x2F;archived Assign To 分配给分配给&#x2F;Assign To：把某个问题 Issue 指定给某个团队成员去解决 Attach file&#x2F;Screenshot 上传附件或屏幕截图附加文件或屏幕截图说明 issue Voting 投票除了问题的创建人，其他人可以用投票来表明支持某个问题的内容 Watching 监视问题每人都有一个 Watch List&#x2F;监视列表，可以监视自己感兴趣的 Issue 的状态等 工作流状态Open 表示问题被提交等待有人处理In Progress 问题在处理当中，尚未完成Resolved 问题曾解决，但解决结论未获认可，需要重新分派解决Reopened 问题解决，等待结果确认，确认的结果是“Reopened”或者“Closed”Closed 问题处理结果确认后，置于关闭状态 summary 摘要component (问题关联的项目)组件affect version (问题影响的项目)版本resolved version (问题将被解决的项目)版本 亲测有效，奔走相告。"},{"title":"Fiddler 操作说明文档","date":"2021-04-24T16:00:00.000Z","url":"/2021/04/25/XBlack/fiddler%20instructions/","tags":[["Fiddler","/tags/Fiddler/"]],"categories":[["undefined",""]],"content":"一、Fiddler介绍​ Fiddler是最强大最好用的Web调试工具之一， 它能记录所有客户端和服务器的http和https请求。允许你监视、设置断点、甚至修改输入输出数据。Fiddler包含了一个强大的基于事件脚本的子系统，并且能使用.net语言进行扩展。换言之，你对HTTP 协议越了解，你就能越掌握Fiddler的使用方法。你越使用Fiddler，就越能帮助你了解HTTP协议。Fiddler无论对开发人员或者测试人员来说，都是非常有用的工具。 Fiddler下载链接 二、Fiddler的工作原理​ Fiddler 是以代理web服务器的形式工作的，它使用代理地址:127.0.0.1，端口:8888。Fiddler是一个抓包工具，当浏览器访问服务器会形成一个请求，此时，Fiddler就处于请求之间，当浏览器发送请求，会先经过Fiddler，然后在到服务器；当服务器有返回数据给浏览器显示时，也会先经过Fiddler，然后数据才到浏览器中显示，这样一个过程，Fiddler就抓取到了请求和响应的整个过程。 Fiddler界面介绍：功能区、工具区、会话列表区、命令行区、请求、响应区 (1)抓取HTTPS数据包设置: 点击“Tools-&gt;Options…-&gt;HTTPS”初始情况： 修改完成后界面： 在首次设置该配置的时候会有提示安装证书弹窗显示，点击安装，安装完成后，点击OK，重启Fiddler就可以了。 但有时候没有弹窗安装证书或根本就没有提示，这种情况一般在Win7中较多出现，Win7的系统https方面 在.net Framework4.0上有bug解决方式：1.cmd 命令行，找到fiddler的安装目录；2.然后执行以下命令： makecert.exe -r -ss my -n “CN&#x3D;DO_NOT_TRUST_FiddlerRoot, O&#x3D;DO_NOT_TRUST, OU&#x3D;Created by ” -sky signature -eku 1.3.6.1.5.5.7.3.1 -h 1 -cy authority -a sha1 -m 120 -b 09&#x2F;11&#x2F;2099 注意：这个命令最后的日期 09&#x2F;11&#x2F;2099 一定要大于现在的日期，否则创建证书是过期的；这样执行完之后，再去重新配置一次，就可以正确安装证书了。 (2)设置远程连接及端口 点击“Tools-&gt;Options…-&gt;Connections”初始情况：一般端口默认为8888，自己也可以自定义端口，点击OK 会话列表区界面展示 #：HTTP Request的顺序，从1开始，按照页面加载请求的顺序递增 Result：HTTP响应的状态 Protocol：请求使用的协议（如HTTP&#x2F;HTTPS） Host：请求地址的域名&#x2F;ip URL：请求的服务器路径和文件名，也包含GET参数 Body：请求的大小，以byte为单位 Caching：请求的缓存过期时间或缓存控制header的值 Content-Type：请求响应的类型 Process：发出此请求的Windows进程及进程ID Comments：用户通过脚本或者菜单给此session增加的备注 Custom：用户可以通过脚本设置的自定义值 请求、响应区显示 Statistics统计页签：通过该页签， 用户可以通过选择多个会话来得来这几个会话的总的信息统计，比如多个请求和传输的字节数。选择第一个请求和最后一个请求， 可获得整个页面加载所消耗的总体时间。从条形图表中还可以分别出哪些请求耗时最多， 从而对页面的访问进行访问速度优化 inspectors检查页签：它提供headers、textview、hexview,Raw等多种方式查看单条http请求的请求报文的信息，它分为上下两部分：上部分为HTTP Request（请求）展示，下部分为HTTPResponse（响应）展示 AutoResponse自动响应页签：在开发或测试过程中，由于各种原因不能得到想要的数据，所以利用相关技术模拟出想要的数据，这种技术也就是Mock挡板技术。在软件测试中，特别是外接第三方接口时，经常用挡板技术模拟相关数据进行开发测试。我们这里只是简单用Fiddler工具来实现挡板技术，模拟服务器响应数据，并把数据自动返给客户端。Fiddler工具中设置AutoResponder选项就可以实现档板技术，自动返回自定义响应数据 AutoResponder 可用于拦截某一请求，进行如下操作： 重定向到本地的资源； 使用fiddler的内置响应； 自定义响应； composer构建页签：支持手动构建和发送HTTP， HTTPS和FTP请求， 我们还可以从web session列表中拖曳session， 把它放到composer选项卡中， 当我们点击Execute按钮， 把请求发送到服务器端 log日志页签：打印日志 Filters过滤页签：多维度的过滤规则，可根据主机、进程、请求头、响应头、状态码、响应类型和大小、断点进行请求的过滤 Timeline时间轴页签：时间轴，也称为Fiddler的瀑布图，展示网络请求时间的功能。 每个网络请求都会经历域名解析、建立连接、发送请求、接受数据等阶段。把多个请求以时间作为 X 轴， 用图表的形式展现出来， 就形成了瀑布图。 在左侧会话窗口点击一个或多个（同时按下 Ctrl 键），Timeline 便会显示指定内容从服务端传输到客户端的时间 三、模拟网络环境（1）模拟网络延迟 单击选择Rules-&gt;Performance-&gt;Simulate Modem Speeds 再次打开浏览器访问系统，网络延迟几秒后打开页面。 (2)精准控制网速 点击选择Rules-&gt;Customize Rules…(或者快捷键Ctrl+R)，打开Fiddler ScriptEdittor文件，并在该文件找到该部分 根据实际修需修改网速后保存"},{"title":"对url上没有后缀的svg图标的处理","date":"2021-04-20T16:00:00.000Z","url":"/2021/04/21/WH/svg%20download%20solve/","tags":[["Java","/tags/Java/"]],"categories":[["undefined",""]],"content":"问题描述在做中转系统的时候，提供的图标地址为内网地址需要中转站将url转为外网可以访问的图标，而提供给中转站的图标url不带图标名称与后缀，直接转存后为二进制文件，文件打开后，末尾多了一串null。导致于浏览器无法识别该svg文件 如下图所示 打开后显示 浏览器中显示 解决方案思路 先通过url拿到文件流(svg图片的文件流) 将文件流通过字符串的方式输出 再将字符串转为svg文件保存 通过springboot 访问静态文件 代码 效果图 "},{"title":"性能测试概念描述","date":"2021-04-20T16:00:00.000Z","url":"/2021/04/21/XBlack/performance%20test%20concepts/","tags":[["Performance Test","/tags/Performance-Test/"]],"categories":[["undefined",""]],"content":"性能测试一、性能测试概念​ 性能测试概括为三个方面：应用在客户端性能的测试、应用在网络上性能的测试和应用在服务器端性能的测试 二、性能测试1.定义​ 通过自动化的测试工具模拟多种正常、峰值以及异常负载条件来对系统的各项性能指标进行测试 2.分类2.1负载测试​ 系统在不同负载下的性能表现，通过负载测试能够测试出系统在各种负载下的性能变化曲线，发现系统的性能拐点，从而找出系统的最佳性能。举例：用户并发测试（递增并发用户数，查看系统性能指标变化） 2.2压力测试​ 系统在高强度负载下的性能表现，通过压力测试可以测试出系统能够承受的最大负载。压测是一种寻求系统介于正常和不正常之间临界值的一种负载测试。压测不仅关注高负载下系统是否正常运行，同时关注负载减小后，系统是否能够恢复 2.3基准测试​ 基准测试（benchmarking）是一种测量和评估软件性能指标的活动。在特定时期（系统稳定时）通过基准测试建立一个已知的性能水平（称为基准线），当系统的软硬件环境发生变化之后再进行一次基准测试以确定那些变化对性能的影响。基准测试可以比较系统在版本迭代过程中，各个性能指标的变化，为系统的版本迭代优化提供参考 2.4配单测试​ 配单测试也叫配置项测试，对被测系统的软硬件参数进行配置的测试。通过配单测试可以找出系统各项资源指标的最佳分配比 2.5容量设置​ 通过容量测试预先分析出反映软件系统应用特征的某项指标的极限值（如最大并发用户数、数据库记录数等），系统在其极限状态下没有出现任何软件故障或还能保持主要功能正常运行。软硬件固定的情况下，对系统进行一定规模的数据量操作，观察系统各项性能指标是否正常。举例：电子商务网站所能承受的、同时进行交易或结算的在线用户数 2.6稳定性测试​ 通过对软件稳定性的测试可以观察在一个运行周期内、一定的压力条件下，软件的出错机率、性能劣化趋势等。进而大大减少软件上线后的崩溃卡死等现象，为软件的逐步优化提供方向及验证。在特定的负载下（正常或略高于正常的负载），在一段运行周期内，对被测系统进行一系列的正常操作，观察各个系统性能指标变化以及系统是否能够长期稳定运行 2.7配置测试​ 基础设施不需要经常变更，应用之间较少依赖或耦合，可以对需求变更快速响应。架构设计会考虑到未来功能的可扩展性，所以当系统增加新功能时，不需要对现有系统的结构和代码进行修改。系统集群的扩展性测试，观察系统在集群服务器增加时，整体性能是否稳步提升，集群中的每台服务器性能是否有额外损耗等 2.8 负载测试VS压力测试​ 相同点：两种测试都是针对系统承受能力的测试，都是一种量的测试；​ 不同点:(1)负载测试是观察系统在不同负载下的测试，旨在找出系统的性能拐点或最佳性; (2)压力测试是观察系统在高负载下的运行情况，旨在找出系统所能承受的最大负载以及系统在高压下再减压后系统恢复正常的能力。 三、专业术语1.模拟用户在测试环境中，使用一些性能测试工具，在物理计算机上来模拟实际用户 2.并发和并发用户数（1）并发：强调大量用户，同事操作、该操作会对服务器产生压力 （2）系统用户数——可以理解为系统注册用户总数 （3）在线用户数——当前统计时正在访问的用户数 （4）并发用户数——同一时刻让服务器产生压力的用户数 3.响应时间​ 客户感受到的响应时间&#x3D;客户端响应时间+网络响应时间+服务器响应时间 （1）客户端响应时间​ 瘦客户端——可忽略不计胖 ​ 客户端——内嵌大量逻辑处理，可能耗时较大，需关注 （2）网络响应时间​ 指网络传输交易结果所消耗的时间（客户端请求的网络延迟+服务器响应的网络延迟） （3）服务器响应时间​ 服务器完成交易请求执行的时间（服务端的响应时间可以度量服务器的处理能力） （4）每秒通过事务数​ 每秒钟系统能够处理的交易或事务的数量，它是衡量系统处理能力的重要指标（TPS和吞吐率在性能测试中的曲线成正相关） （5）每秒单击数​ 每秒钟用户向Web服务器提交的HTTP请求数，这是Web应用特有的一个指标 （6）吞吐量​ 指一次性能测试过程中网络上传输的数据量的总和 （7）吞吐率​ 吞吐率&#x3D;吞吐量&#x2F;传输时间"},{"title":"Docker部署教程-Linux","date":"2021-04-19T16:00:00.000Z","url":"/2021/04/20/XBlack/docker%20deploy/","tags":[["Docker","/tags/Docker/"]],"categories":[["undefined",""]],"content":"1.安装VM虚拟机1.1下载VM虚拟机进入VM官网，根据不同系统的点击不同的下载方式（本人是安装在Windows系统上安装） 1.2安装VM虚拟机双击VMware，跳出弹窗点击“是”，进入安装模式（如图所示） 先勾选，在点击“下一步” 先勾选，在点击“下一步” 安装位置根据自己意愿选择安装位置（可以选择默认），默认勾选，点击“下一步” 默认勾选，在点击“下一步” 默认勾选，在点击“下一步” 点击“安装” 进入安装步骤 点击”许可证”， 输入YF390-0HF8P-M81RQ-2DXQE-M2UT6，点击“输入” 点击“完成”，安装安装步骤完成 1.3部署虚拟机环境​ 登录ubuntu，点击“下载”，选择下载的路径（本人路径选择桌面），完成linux系统下载 ​ VMware 虚拟机安装完成后，双击“图标“ ​ VMware软件打开，点击“创建新的虚拟机“ 默认选项，点击“下一步” ​ 如果刚刚liunx系统下载完成后，安装程序光盘将自动显示该系统、然后点击“安装程序光盘映像文件”选择刚才下载完成的Linux，再次选择“创建空白的硬盘”,最后选择“下一步”。 选择Linux，点击版本并选择Ubuntu 64位，最后“下一步” 虚拟机名称可以默认，也可以自己编写，位置选择，（本人选择默认），最后点击下一步 磁盘大小按照自己意愿，虚拟磁盘选项为默认选项，最后点击“下一步” 点击“完成”，虚拟机部署完成 首先选择虚拟机，再点击“编辑虚拟机设置”， 打开设置界面后，选择“CD&#x2F;DVD”选项，再点击“使用ISO映像文件”，最后点击“确定”，设置完成后，返回到首页 选择虚拟机后，再点击“开启次虚拟机” 1.4Liunx安装点击“确定”，开始Liunx的系统安装 选择语言，选择自己喜欢的语言，在点击“安装” 点击“继续” 所有选项为默认，在点击“继续” 所有选项为默认选项，点击“现在安装”，弹出界面点击“继续” 默认点击“继续” 输入信息后，点击“继续”后，等待一段较长时间，安装成功之后，再点击重启 重启完成后，系统安装成功. 2.在Ubuntu环境下Docker部署2.1获取管理员权限进入终端：点击“在终端中打开” 获取管理员权限： 先输入命令：sudo passwd root 先输入电脑开机密码： 在输入新的密码： 重新输入新的密码： 提示更改密码成功 输入命令：su 输入新的登录密码 获取到管理员权限 部署docker 首先，更新现有的包列表命令：sudo apt update 安装一些允许通过HTTPS才能使用的软件包命令：sudo apt install apt-transport-https ca-certificates curl software-properties-common Docker存储库的GPG密钥添加到您的系统命令: curl -fsSL  | sudo apt-key add - Docker存储库添加到APT源命令：sudo add-apt-repository “deb [arch&#x3D;amd64]  bionic stable” 使用新添加的repo源中的Docker包更新包数据库命令：sudo apt update 确保您要从Docker repo安装而不是默认的Ubuntu repo命令：apt-cache policy docker-ce 安装Docker命令：sudo apt install docker-ce 检查Docker是否正在运行命令：sudo systemctl status docker 2.2 使用Docker命令查看所有子命令：docker 查看有关Docker的系统信息命令：docker info 2.3 使用Docker镜像检查Docker Hub访问和下载镜像命令：docker run hello-world 可以使用docker带子命令的search命令搜索Docker Hub上可用的镜像。例如，要搜索Ubuntu映像，请输入： docker search ubuntu,在OFFICIAL列中，带OK标记的表明这个镜像由公司构建和支持。其他镜像则由个人创建。确定要使用的映像后，可以使用命令pull将其下载到计算机。 执行以下ubuntu命令将官方映像下载到您的计算机：docker pull ubuntu 查看已下载到计算机的镜像命令：docker images 2.4运行Docker容器使用Ubuntu的最新镜像运行一个容器命令：docker run -it ubuntu,执行后我们进入docker内部 更新容器内的包数据库命令：apt update 安装Node.js命令:apt install nodejs，如果遇到下列问题，根据提示先选择地区：6 选择城市：70 ​ Ubuntu存储库中安装容器中的Node.js. 安装完成后，验证Node.js是否安装成功命令：node -v，显示版本号后说明该容器Node.js已安装成功。在输入命令exit，退出该容器 2.5管理Docker容器使用一段时间docker后，计算机中应该部署了很多的Docker容器，输入docker ps,可以查看当前运行的Docker容器。 输入命令 docker -ps -a,可以查看该计算机内所有的容器 输入命令 docker -ps -l(L的小写),可以查看最新创建的容器 假如我想启动我最近一次创建的容器，启动容器命令：docker start +container id(该容器的ID) 我们这是输入当前运行的命令：docker ps 假如我想暂停当前运行的容器，启动容器命令：docker stop+container id(该容器的ID) 2.6将容器中的更改提交到Docker镜像将更改提交到新的Docker镜像命令：docker commit -m“描述” -a“作者名字” 容器ID 存储路径（XBlack&#x2F;ubuntu-nodejs） 检查该镜像是否已部署完成输入命令：docker images 2.7将Docker镜像推送到Docker存储库请先登录Docker Hub，命令：docker login -u 你的Docker Hub账号 将刚刚部署的新镜像推送Docker Hub存储库命令：docker push xblack1216&#x2F;ubuntu-nodejs，表示上传成功。 我们可以去Docker Hub上查看镜像是否以上传完成 "},{"title":"用VScode创建代码片段","date":"2021-04-19T16:00:00.000Z","url":"/2021/04/20/linvkey/use%20vscode%20to%20create%20code%20snippets/","tags":[["VScode","/tags/VScode/"]],"categories":[["undefined",""]],"content":"描述 在编码的时候会遇到一些经常要用到的代码片段，可以在VScode上定义好，通过特定的快捷方式呼出对应的代码段 操作打开VScode——设置——用户代码片段 选择新建全局代码片段文件 给你要呼出的代码段取个快捷名称然后回车保存 接下来会跳转到要呼出的代码段页面 例如我创建一个Vue的模板 快捷名称取为：vue 然后在呼出的代码页面创建想要呼出的代码片段 $0 是每次呼出代码片段后鼠标光标悬停的位置 亲测有效，奔走相告。"},{"title":"vue的深度监听（对象数组同理）","date":"2021-04-12T16:00:00.000Z","url":"/2021/04/13/sunyifang/Vue-listening/","tags":[["JavaScript","/tags/JavaScript/"],["Vue","/tags/Vue/"],["demo","/tags/demo/"]],"categories":[["undefined",""]],"content":"昨天在做项目时遇到了一个问题在Vue中监听obj.name时新增了一个属性 但是发现属性并没有变化后来查询了官方文档发现Vue不允许动态添加prototype来执行深度监听 对象 如下： 两秒后页面不会发生任何变化改动后： 出现student 数组 两秒后。。。什么都没有发生 成功刷新"},{"title":"npm包发布流程","date":"2021-04-12T16:00:00.000Z","url":"/2021/04/13/sunyifang/npmRelease/","tags":[["Vue","/tags/Vue/"],["NPM","/tags/NPM/"]],"categories":[["undefined",""]],"content":"1.写好自己的代码2.代码根目录 3.按照提示完成类似以下内容的输入 4.注册npm账号5.首次登录 6.发布npm包npm publish –access&#x3D;public 7.包更新改完pack.json后 8.卸载删除 tips在根目录写个index.js（默认）把想导出的组件&#x2F;js文件放进去即可如果遇到名称相同会报错 改一下pack.json里面的name即可"},{"title":"用swiper实现tab列表切换","date":"2021-04-12T16:00:00.000Z","url":"/2021/04/13/sunyifang/swiperForTab/","tags":[["JavaScript","/tags/JavaScript/"],["Vue","/tags/Vue/"],["swiper","/tags/swiper/"]],"categories":[["undefined",""]],"content":"结果如下： 代码如下： 其中夹杂了一个vant轮播图配置 给上面的tab+上一个 nextEl: “.swiper-button-next”, prevEl: “.swiper-button-prev”, 的类就可以控制轮播图的翻页操作了注：轮播图引入文件： vue-awesome-swiper版本号： "},{"title":"关于最近项目中使用vant的一些总结","date":"2021-04-12T16:00:00.000Z","url":"/2021/04/13/sunyifang/vantUi/","tags":[["JavaScript","/tags/JavaScript/"],["Vue","/tags/Vue/"],["Vant","/tags/Vant/"]],"categories":[["undefined",""]],"content":"vantUi是有赞团队开发的一款针对于小程序及手机端的一款UI框架使用时非常方便 但是其中一些bug也很多 把项目中遇到的坑及小tipes分享一下供自己记忆同时也分享给大家 好好读文档 好好读文档 好好读文档 !importantList 列表list列表组件完全是全自动的自动请求、自动删除loading、页面刷新自动更新。。。总之在list中你只要做两件事： 在请求数据&#x3D;&#x3D; 数据库数据 时给list一个finished状态 填写你所需要的请求函数 重用list导致的bug在写如上代码时重用list列表 –导致左右击后每次选择条件onload函数会触发两变bug分析：由于每次切换当有的页面加载完成后finished状态会改变，当其重新开启的时候会触发一次onload函数而我们正常来说也会手动触发一次请求数据所以在每次请求时候判断一下 finished改变的时候就不要重新手动触发onload函数了如下： vant一些内置api也很好用比如：通过ref绑定详细请阅读文档 vant中的toast等代码形式的样式需要额外引入如： 然后再使用，否则会报错 DatetimePicker 时间选择器这个组件可以精确到分钟 已经很好用了 Slider 滑块其中有一个选项可以实现双滑块很舒服妈妈再也不让我写原生了"},{"title":"有关恒大项目代码习惯的总结","date":"2021-04-11T16:00:00.000Z","url":"/2021/04/12/sunyifang/code-rules/","tags":[["JavaScript","/tags/JavaScript/"],["Vue","/tags/Vue/"],["code","/tags/code/"]],"categories":[["undefined",""]],"content":"变量命名尽量起一些名字较短 通俗易懂的id不要搞得太长看着不舒服例如：listForExmation 可以写成：list4exma 变量整理将有联系的代码整理成一个对象，调用简单，看代码也很清晰例如：listfor1，listfor2，listfor3，listfor4可以写成listfor：{listfor1，listfor2，listfor3，listfor4}调用直接点 根据返回的数据适当设置类型列表比如传过来的格式：[{},{},{},{}]接收也可以用同样的格式然后写一个forEach方法调用 不用遍历出来 传参再以同样的形式传过去 函数重用类型相似的函数可以传一些参数（参数可以给默认值）的形式例如： 可以写成showPicker（a,b&#x3D;1）{}的形式 注释也要多写一些不能光写一个函数自己都看不懂 -。-控制代码长度，慢慢变强"},{"title":"vuepress插件medium-zoom在跳转后无法触发的问题","date":"2021-03-29T16:00:00.000Z","url":"/2021/03/30/sicker/lifecycle%20hooks%20does%20not%20work%20on%20plugin-medium-zoom/","tags":[["vuepress","/tags/vuepress/"],["插件","/tags/%E6%8F%92%E4%BB%B6/"]],"categories":[["undefined",""]],"content":" vuepress 插件 medium-zoom 在跳转后无法触发了，查询源码后发现竟然是生命周期钩子无法工作。虽然不确定是否存在普遍情况，但还是将解决方案放出，作为记录 今天在为文章寻找一个灯箱组件时，竟然发现官方自带的 medium-zoom 插件就是我想要的。亏我之前一直以为它是一个全屏窗口的插件。但是集成后，事情却没有如愿解决。 尝试在插件里增加如上配置，发现入口页确实达到了预期，但是跳转后，却失效了。 ::: center在 查阅解决方案时，找到的相同问题图片^first::: 下方同时有 &#x3D;&#x3D;尤雨溪&#x3D;&#x3D; 大神亲自给出的解决方案， 简单来说，就是… 升级版本！（希望对你的情况有所帮助） 遗憾的是，我的似乎并没有得到解决。 好在，源码异常的简单。抛去插件注册和样式，寥寥 21 句。 我试着在 updateZoom 方法里打印了一个字符串。果不其然，这个字符串只有在第一次打开页面的时候打印了。之后，无论我怎么跳转都无法再打印出。 问题显而易见： updated() 这个生命周期的钩子不正常工作了！！ 问题找到了，但是我一时之间也有些不知所措。那么至少，暂且暴力解决下吧。 以下解决方案仅为临时方案，请大家谨慎使用，如有解决方案，请大家务必告诉笔者！谢谢！ \\docs\\.vuepress\\theme\\layouts\\Post.vue 中恰当的地方加入如下代码。 另外，记得同时移除掉 config.js 中插件的配置。 这样，就搞定了。"},{"title":"群辉安装gitlab，并解决clone的IP错误","date":"2021-03-29T16:00:00.000Z","url":"/2021/03/30/sicker/wrong%20cloned%20ip%20for%20synology%20nas%20gitlab/","tags":[["Synology","/tags/Synology/"],["gitlab","/tags/gitlab/"]],"categories":[["undefined",""]],"content":" 公司的群辉 NAS 装的 gitlab ，在 clone 项目的时候给的 IP 错误是错误的，每次 clone 项目都异常麻烦。今天终于忍无可忍打算解决掉它！ 如果你只是需要解决修复 gitlab clone 时，IP 不对的问题，请直接移步 #修复 gitlab clone 时，IP 不对的问题 安装 docker首先，通过 &#x3D;&#x3D;套件中心&#x3D;&#x3D; 搜索 docker 安装成功后，进入该应用。（你也可以直接安装边上的 gitlab 因为笔者当时并没有选择直接安装它，所以安装方式不详） 在左侧菜单中选择 &#x3D;&#x3D;注册表&#x3D;&#x3D; 如下图搜索并选中 gitlab/gitlab-ce ，在左上方找到下载按钮点击下载！（亦可双击下载）版本直接选择 latest 最后版本。 接着在 &#x3D;&#x3D;映像&#x3D;&#x3D; 中即可找到该 image 点击启动，选取 &#x3D;&#x3D;高级设置&#x3D;&#x3D; 在 &#x3D;&#x3D;卷&#x3D;&#x3D; 中，&#x3D;&#x3D; 添加文件夹 &#x3D;&#x3D; 配置文件映射 （重要） NAS 本地文件夹 DOCKER镜像被映射路径 描述 &#x2F;docker&#x2F;gitlab&#x2F;data &#x2F;var&#x2F;opt&#x2F;gitlab 存储数据 &#x2F;docker&#x2F;gitlab&#x2F;logs &#x2F;var&#x2F;log&#x2F;gitlab 存储日志文文件 &#x2F;docker&#x2F;gitlab&#x2F;config &#x2F;etc&#x2F;gitlab 存储配置文件 配置完成后即可启动 gitlab 了。 修复 gitlab clone 时，IP 不对的问题如果你又一定的变成基础，完全可以移步 #更暴力的解决方案 因为是 docker 驱动，所以，从群辉的面板中，我们是无法对其内的 gitlab 进行配置的。 但是，由于我们再安装时，配置了文件映射。 解决这个问题的突破点，也就依托在这里了。 从上文的表格中，我们也已经了解到了 /docker/gitlab/config 路径，映射的正是 gitlab 的配置文件。于是，我们可以通到群辉预装的 &#x3D;&#x3D;File Station&#x3D;&#x3D; 进入该路径。 下载 gitlab.rb 在本地通过文本编辑器打开，（推荐 Sublime Text、visual studio Code ），当然你也可以使用记事本打开。 打开后，我们直接下拉到最底下，依据下文注释，新增如下行 接着上传覆盖回去，打开 gitlab ， 你的问题是否也解决了呢？ 更暴力的解决方案 打开 ssh 接着，我们即可通过管理员账号密码，连接我们的 NAS 直接操作 docker 键入 可以看到，下载被挂载的镜像，仅有 gitlab/gitlab-ce:latest 我们找到该镜像的 CONTAINER ID ，笔者的为 f4bc755c7297 ，于是，我们就可以尝试进入该镜像啦！ 键入 从用户名判断，我们已经进入了该镜像内部。 接着依据上图进行操作，接着在编辑模式下，依据下文注释，新增如下行(按 shift + g ，可以快速移入最下行，按 i 进入编辑模式， 按 ctrl + c 退出编辑模式 键入 :wq 保存退出 ，具体可以自行学习) 最后一步，重启镜像，看看效果吧。 参考资料"},{"title":"Vue路由传参","date":"2021-03-25T16:00:00.000Z","url":"/2021/03/26/sunyifang/vue-router-param/","tags":[["HTML","/tags/HTML/"],["Vue","/tags/Vue/"],["CSS","/tags/CSS/"]],"categories":[["undefined",""]],"content":"name传参发送参数：在路由中写好接收参数： 命名路由（post传参）发送参数： 接收参数： 查询参数（get传参）发送参数： 接收参数： 二者区别：1.命名路由搭配params，刷新页面参数会丢失2.查询参数搭配query，刷新页面数据不会丢失3.post 类型的传参必须用 name ，如果用 path，那么 addres 页面的 params 是空的。4.不管是 get 类型的传参还是 post 类型的传参，但凡用 name 必须要在路由里配置好 name 属性。5.参数为 Object 类型时要注意"},{"title":"vuepress/vue动态更换配色方案","date":"2021-03-22T16:00:00.000Z","url":"/2021/03/23/sicker/color%20theme%20for%20vuepress/","tags":[["vuepress","/tags/vuepress/"],["插件","/tags/%E6%8F%92%E4%BB%B6/"]],"categories":[["undefined",""]],"content":" TODO 上一直挂着调色盘，原想可以去网上白嫖一个插件该是分分钟的事儿，没想怎么也没找到心仪的，只好自己动手改造了一个。思路： 延续 vuepress 的 css 预处理器，为样式配置好各种颜色变量，接着在使用该颜色时，使用变量进行替代，以实现便捷地颜色大面积更换。但很可惜的是， stylus 本身是无法使用脚本对其进行操作的。所以，我们只能折衷采用 css 的变量作为桥梁。以 vuepress 默认博客主题为例，将入口文件 docs\\.vuepress\\theme\\styles\\index.styl 进行简单处理。 检索主题下的所有文件，将所有采用 $accentColor 处（除配色版本身的变量配置与上述入口文件处），用 var(--main-color) 替代，因编译器限制，这里无法使用stylus的内置方法 darken 或 lighten，经测试，也无法采用原生的 color 函数[^f] ，只能妥协采用相同配色。 接着，参考 vcolorpicker [^s] 提取 ColorPicker.vue源码： clickoutside.js[^t] 在想要使用的地方引入组件 接着处理 headleChangeColor 事件 对插件的样式进行适配调整例，在 index.stylus 最下新增，覆盖默认样式： 最后去查看下效果吧。 当然，因为这边的需求较为简单，请依据个人需求自行再调试。 另外，经测试IE11下无效 [^f]: 例：color(#efb4ea alpha(58%) hue(360) saturation(78%) shade(18%)) 参考[^s]: vue-color-picker[^t]: click-outside"},{"title":"如何优雅的采用vercel托管vuepress静态网站","date":"2021-03-22T16:00:00.000Z","url":"/2021/03/23/sicker/how%20to%20use%20vercel/","tags":[["vuepress","/tags/vuepress/"],["vercel","/tags/vercel/"]],"categories":[["undefined",""]],"content":"为什么使用 vercel 而非 xxxpages、obs等静态托管因某些不言而喻的原因，git pages 在国内的速度一言难尽。 又因为某些不言而喻的原因，我没法备案，也就无法绑定域名了，所以 vercel 也就成为了首选。 如果你没有域名，或者已经备案，同时又不经常更新。完全可以采用 GITEE PAGES 或者 腾讯、阿里、华为云的文件存储来托管。 采用github|gitlab|bitbucket托管其实这个无甚好说，常规操作，应该绝大多数人采用的就是这种模式。 优点是自动更新无需打包，很是省力。 就简单说下如何去配置 登录 新增项目 选取 vuepress 的库 import 选取根路径即可。 依据下图进行配置 等待 yarn 打包后即可 我们来看一下打包的日志 可以看到， vercel 主要做了这些工作。 clone 下你的代码 通过 yarn or npm 安装依赖 运行打包 每当代码库更新后，vercel 就会自动再次执行该流程。 但是，有优点就有缺点。首先，不算缺点的缺点，即是国内访问这些代码托管网站的速度异常的感人。 另我又遇到了另外一个问题， 在代码打到一定复杂度后，会使得 vercel 无法正确打包。 此时，打包后上传到 github 上似乎成为了最后的选择。 但是，实在过于麻烦。不适合我这种懒人~由此契机，也就诞生了如下的方法。 vercel-clivercel-cli[^f]，在本地直接打包上传至 vercel 安装 安装成功后，初始化 vercel 依提示键入注册 vercel 使用的邮箱 从邮箱激活账户激活后，命令行会提示如下 √ Email confirmedCongratulations! You are now logged in. In order to deploy something, run vercel.💡 Connect your Git Repositories to deploy every branch push automatically (). 初始化项目 依据提示关联或新建一个项目,当询问 In which directory is your code located 直接跳过即可。 之后，会生成1个网站地址，暂时忽略。 此时就可以在根路径看到 .vercel 的文件夹了，反过来说如果不存在该文件夹，则失败了。 新建 deploy.sh 文件键入 在命令行键入 ./deploy.sh 测试一键打包成功后，即可看到正常的页面。 其他命令./pushToGit.sh 至此，我们就可以优雅的将源码提交至代码库，而 build 的文件直接上传至 vercel 再也不用忍受 github 的龟速，再也不用忍受 vercel 的龟速打包，再也不用苦逼的打包后上传静态文件！ 优雅万岁！[^f]:vercel-cli首页"},{"title":"在vuepress中使用live2d看板娘","date":"2021-03-20T16:00:00.000Z","url":"/2021/03/21/sicker/live2d%20for%20vuepress/","tags":[["vuepress","/tags/vuepress/"],["插件","/tags/%E6%8F%92%E4%BB%B6/"],["live2d","/tags/live2d/"],["看板娘","/tags/%E7%9C%8B%E6%9D%BF%E5%A8%98/"]],"categories":[["undefined",""]],"content":" 在合适的地方插入 将静态资源，即 live2d 所采用的模型 model.moc 、模型配置文件 model.json 、模型皮肤 textures/some.png 、 模型动作 motions\\*.mtn 、声音 sounds\\*.mp3 置入 \\docs\\.vuepress\\public\\live2d 中，这样在 vuepress 打包时，会自动置入静态文件夹中。 在 script 标签下的 vue 生命周期钩子 mounted 中引入调用方法， 注意引入 js 的路径，此案例中两者在同一路径，故使用 ./ ，请按照实际情况自行修正。 最后，别忘记在 css 中书写好 canvas 的样式。 示例： 出现的问题 Q：build 时 navigator is not defined 问题 A：因 live2d.min.js 采用 window 以及 navigator 对象，需要在 vue.js 渲染页面后方可使用，应通过 import 方法，在回调中调用 loadlive2d 方法。 Q：为何要使用 this.$withBase 包裹路径 A：this.$withBase 是 vuepress 提供的自动包裹 base 的一个内置 helper,可以帮助你生成正确的路径。以避免修改 config.js 中的 base 项后，路径失效。"},{"title":"csdn置入图片后生成的水印问题","date":"2021-03-14T16:00:00.000Z","url":"/2021/03/15/linvkey/csdn%20watermark/","tags":[["markdown","/tags/markdown/"],["csdn","/tags/csdn/"]],"categories":[["undefined",""]],"content":" 去掉image 后的&#x2F;watermark即可去除水印"},{"title":"后台管理系统权限管理","date":"2021-03-14T16:00:00.000Z","url":"/2021/03/15/sunyifang/vue-element-admin-permissions/","tags":[["微信小程序","/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"]],"categories":[["undefined",""]],"content":"定义router.js 引入官方layout组件 创建权限要求基页 创建权限要求界面 注册路由 写一些公用路由方法 再permission.js中加入路由守卫（根目录下） 每次路由跳转判断权限 调用Vuex种方法提交判断需求 读取出当前用户可以加载的路由 后判断当前路由表 做校验如果没有则插入（这里可以做判断如果有多余的要删除） 这里的判断也可以学一下如果当前页面下没有权限 跳转404 重新进入后用redirect跳转回来 权限判断放到了store.modules.permissions 判断路由中的meta中是否有meta字段 如果有则判断没有则直接显示 同时过滤 他的children路由如果有则深度一直遍历下去 将过滤出来的路由返回并放置到vuex中 注意左侧索引栏因为索引栏是根据router.options.routes来渲染的，Vue的addRouter api 不会自动将路由加到options中所以尽量用vuex来控制这里只是简单的实现一下。 按钮级别 定义permission.js(store就是单纯的取出权限列表) 单个页面引入 整体引入 "},{"title":"vueApiControl","date":"2021-03-14T16:00:00.000Z","url":"/2021/03/15/sunyifang/vueApiControl/","tags":[["微信小程序","/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"]],"categories":[["undefined",""]],"content":"首先根据接口写好对应页面的请求内容如图尽量保证js文件名称与页面文件名称相同（易于查找） 根据文件目录动态引入&#x2F;导出接口提高便捷性 根据项目情况编写拦截&#x2F;插入内容 编写env文件 vue继承api 使用"},{"title":"wxScroll-swiper","date":"2021-03-14T16:00:00.000Z","url":"/2021/03/15/sunyifang/wxScroll-swiper/","tags":[["微信小程序","/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"]],"categories":[["undefined",""]],"content":" 要点swiper内部套scroll-view注意：1.scroll竖直滚动高度不能给百分比要给px&#x2F;rpx2.swiper内部item posiiton定位高度100%3.swiper高度要给定值4.如果横向滚动也要给水平的宽度 代码xml wxss js "},{"title":"微信小程序上手常用功能","date":"2021-03-11T16:00:00.000Z","url":"/2021/03/12/linvkey/wechat%20applet/","tags":[["JavaScript","/tags/JavaScript/"],["Vue","/tags/Vue/"],["微信小程序","/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"]],"categories":[["undefined",""]],"content":"创建pege创建页面在项目根目录下的page文件夹中创建文件夹，然后再【新建page】这样就会在刚刚的新建文件夹中生成四个文件，这四个文件就是一个页面需要使用的配件分别是 .js文件 .json文件 .wxml文件 .wxss文件 1，js文件主体是 data中存放着页面定义的变量 2，json文件是用来配置页面如果项目引用了LinUI那么使用插件就要在json文件中配置 3，wxml文件相当于Vue中的template不过不需要内部有一个唯一的标签盛放所有代码 4，wxss文件是编写css的文件 页面跳转 从一个小程序跳转到另一个小程序、 指令wx:for wx:if 注意事项想用div就用 view标签，想用span放文本就用text标签，小程序中放图片用image标签 "},{"title":"微信小程序常用API","date":"2021-03-11T16:00:00.000Z","url":"/2021/03/12/sunyifang/wechat%20commonly/","tags":[["微信小程序","/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"]],"categories":[["undefined",""]],"content":"1.wx:for 2.父传子父： 子： 3.子传父子： 父： 注意：在父组件中的js文件里获取子组件传过来的值,这里的自定义方法要写在Component构造器中的methods里，因为我写在Page中他不会被触发 4.根据值来给定不同的CSS样式 注意：样式要用引号包裹 5.禁止页面滚动json文件中配置： "},{"title":"Flex弹性布局","date":"2021-03-10T16:00:00.000Z","url":"/2021/03/11/linvkey/flex/","tags":[["HTML","/tags/HTML/"],["CSS","/tags/CSS/"],["flex","/tags/flex/"]],"categories":[["undefined",""]],"content":"1 flex布局的特性任何容器都可以进行flex布局 2 Flex特殊之处父容器开启Flex阵法之后，子元素的float 浮动，清楚clear，vartical-align都将失效，因为这一切都将由Flex掌管，也就是无需子元素设置那些属性 3 Flex核心原理通过给父容器添加flex属性，来控制子元素位置的排列方式 4 父容器定制的规则以下6个属性是对父容器设定的： flex-direction：设置主轴的方向 justify-content：设置主轴上子元素的排列方式 flex-wrap：设置子元素是否换行 align-items：设置侧轴上子元素的排列方式（单行） align-content：设置侧轴上子元素的排列方式（多行） flex-flow：复合属性 相当于同时设置（flex-direction：设置主轴的方向）和（flex-wrap：设置子元素是否换行） 4.1 Flex-direction 设置主轴注意在设置这个属性之前，要先开启flex布局 也就是在父容器中先设置display:flex; 主轴侧轴 横向为主轴，纵向为测轴，当然也是可以变换的 主要通过flex-direction：设置谁为主轴，剩下的就是侧轴 而子元素是跟着主轴来排列的 flex-direction 开启Flex的口诀就是在父容器中设定：display:flex; 4.1.1 flex-direction:row; 4.1.2 flex-direction:row-reverse;设置完横向反转后，原来是从左往右，现在是从右往左， 而且1 2 3 的顺序也变成了3 2 1 4.1.3 flex-direction:column;刚刚的主轴是X轴，设置完flex-direction:column;后 主轴将变为为Y轴，也就是子元素开始以Y轴分布 4.1.4 flex-direction:column-reverse;有横向反转就有纵向反转 4.2 justify-content设置主轴上子元素的排列方式注意在设置这个属性之前，要先设置好主轴是哪个 （当然设置display:flex之后就默认有以X为主轴了） justify-content 4.2.1 justify-content:flex-start;其实在display:flex这句话一出来 就等于有了两句默认的布局 flex-direction:row; 以X为主轴 justify-content:flex-start; 子元素从父容器的左侧开始分布 4.2.2 justify-content:flex-end子元素从父容器的右侧开始分布 4.2.3 justify-content:center;子元素从父容器的中间开始分布 4.2.4 justify-content:space-around;子元素平分主轴（可能是X轴也可能是Y轴）一行或一列的空间（如果主轴是X轴那么就平分一行的空间，如果主轴是Y轴就平分一列的空间） 4.2.5 justify-content:space-between;刚刚的justify-content:space-around;是不贴边分布 justify-content:space-between;是贴边分布 4.3 flex-wrap在传统布局时，一般是用浮动进行横向排列然后再用margin进行分布 如果父容器宽度有限，则子元素就会在下一行分布（被迫被挤下来） 如果使用Flex布局则，那么子元素换不换行则完全取决于程序员自己 例如： 父容器宽为1000px 现有4个宽度为200px高度为100px，margin为10的子容器 也就是说子容器整体的宽度为2004+108&#x3D;880px 所以现在父容器剩余的宽度为120px不能再容纳一个子容器了 但是再加一个子容器的话flex可以自动分配父容器的宽度 可以看到子容器的变化——宽度从原来的200px变为了180px 细心一点可以发现，flex只会改变子容器的大小而不会改变margin的大小 这样一来就不会影响到我们想要的布局 4.3.1 flex-wrap:nowrap;在flex布局中默认不换行也就是 flex-wrap:nowrap; 4.3.2 flex-wrap:wrap; 当所有子容器的宽度加起来已经超过父容器的宽度时，若不想缩小子容器的宽度那就要设置换行 flex-wrap:wrap; 4.4 align-items设置侧轴上子元素的排列方式，如果主轴为X，侧轴就是Y（默认的） 例子： 4.4.1 align-items:flex-start;初始状态是 也是默认的效果 align-items:flex-start; 4.4.2 align-items:flex-end;加入 align-items:flex-end;时 4.4.3 align-items:center;加入 align-items:center;时 4.4.4 align-items:stretch;加入 align-items:stretch;时 注意要子容器不要设高度，因为这个属性会将子容器的高度拉升至父容器一样（包含子容器的margin） 4.5 align-content设置侧轴上子元素的排列方式（多行） 设置这个属性时，必须允许子元素换行——flex-wrap:wrap; 初始状态 4.5.1 align-content:flex-start ;紧挨着的第一行 4.5.2 align-content:flex-end ;从下面开始分布 4.5.3 align-content:center ;从中间开始分布 4.5.4 align-content:space-around; 4.5.5 align-content:space-between; align-content和align-items的区别： align-items适用于单行情况下，只有上对齐、下对齐、居中和拉伸align-content适应于换行(多行)的情况下（单行情况下无效)，可以设置上对齐、下对齐、居中、拉伸以及平均分配剩余空间等属性值。总结就是单行找align-items多行找align-content 4.6 flex-flowflex-flow属性是flex-direction和flex-wrap的复合属性 例如：以X为主轴，并且能够换行 flex-flow:row wrap;即可 如果使用flex-direction和flex-wrap则需要写 flex-direction:row; flex-wrap:wrap; 两行代码 所以 ： | flex-direction:row; | 等于 | flex-flow:row wrap; || ——————- || flex-wrap:wrap; | 5 Felx布局子项常见属性flex子项目占的份数align-self控制子项自己在侧轴的排列方式order属性定义子项的排列顺序(前后顺序) 5.1.1 flexflex属性定义子项目分配剩余空间，用flex来表示占多少份数。 现在要做一个效果，在一行中有三个部分，左侧要固定，右侧要固定 剩下中间的部分自适应 html部分 felx布局的css部分 在第一个盒子和第三个盒子给了固定宽高的情况下注意看第二个盒子的样式 并且屏幕缩小时绿色宽度是会进行自适应的 这就是淘宝有名的圣杯布局 -——————————————————————————– 现在要做，一行平均分三份 传统的百分比是将每个子元素的宽度设为33.3% 而flex是有几个子元素就将父容器平均分成几等分，然后每个子元素只占一份 html代码： felx布局的css部分 也可以指定性的不平均分配 比如想让第一个span多占一点 可以这样 而且在页面缩小时，子容器都会按此等分缩小 5.1.2 align-self控制子元素在侧轴上自己移动 看到现在可以发现，子容器的分布是在主轴上的，子容器的移动是在侧轴上的 例子1 现有父容器中有三个子容器 现在只想让第三个子容器移动到下方 5.1.3 order例子2 还是刚刚那三个子容器 现在想改变1号容器和2号容器的顺序 只需要改变2号容器的顺序即可，每个容器默认的order是0，也就是自己本身的位置 order设为1时代表自己向后移动一位 设为-1时代表自己向前移动一位 所以只需要将2号容器的顺序order设为-1向前移动一位即可 值得注意的是，如果有子容器1号2号3号，现在想把1号容器移动到2号之后3号之前 原理上是将1号容器的order设为1代表向后移动一位 可实际上 1号容器会直接跑到最后面 多加几个容器也是一样 现在发现，order改变顺序并不能使容器插队 你后来的人就要排队 如果所有项目的f1ex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的 flex-shtrink 属性为o，其他项目都为1，则空间不足时,前者不缩小。 好了Flex布局到这里已经足够一般开发使用了"},{"title":"为vuepres增加favicon站标","date":"2021-03-08T16:00:00.000Z","url":"/2021/03/09/sicker/add%20favicon%20to%20vuepress/","tags":[["vuepress","/tags/vuepress/"]],"categories":[["undefined",""]],"content":"在 .vuepress/config.js 中在合适位置加入如下代码 准备 logo.png 或者 对应格式的图片文件，置入 .vuepress/public 下 打开站点，看看效果吧！"},{"title":"在vuepress/markdown-it中加入checkbox支持","date":"2021-03-08T16:00:00.000Z","url":"/2021/03/09/sicker/use%20checkbox%20in%20vuepress/","tags":[["vuepress","/tags/vuepress/"],["插件","/tags/%E6%8F%92%E4%BB%B6/"]],"categories":[["undefined",""]],"content":"引入组件下载依赖 配置在 .vuepress 下的 config.js 中，在如下位置加入 "},{"title":"关于VUE的SEO优化","date":"2021-03-07T16:00:00.000Z","url":"/2021/03/08/linvkey/vue%20seo/","tags":[["JavaScript","/tags/JavaScript/"],["Vue","/tags/Vue/"],["SEO","/tags/SEO/"]],"categories":[["undefined",""]],"content":"1.在项目中安装 2.在vue.config.js中写入以下代码 注意修改routes数组的值 3.在main.js中添加如下内容 4.注意项目的router必须是history模式 亲测有效！！！"},{"title":"安装Koa插件时遇到的问题","date":"2021-03-04T16:00:00.000Z","url":"/2021/03/05/linvkey/Koa%20plugins/","tags":[["JavaScript","/tags/JavaScript/"],["Vue","/tags/Vue/"],["Koa","/tags/Koa/"],["nuxtJS","/tags/nuxtJS/"]],"categories":[["undefined",""]],"content":" 安装Koa插件时遇到的问题 问题描述： 电脑中缺少python环境和桌面应用程序 解决方法： 用Powershell或者cmd 用管理员身份打开 它会安装python 2.7 和 VisualStudio 注意 选择Visual C++生成工具 命令行执行完后请等待，此时你的C盘会有4G的占用 当滑轮滚动命令行窗口 它不锁定 或者看到 All done!时 方可关闭此窗口 强调！如果再安装Koa插件时依旧出现问题，那么请重复命令行操作 因为你的电脑可能因为网络问题而安装C++桌面应用程序不成功 安装过程可留意C盘的大小变化，安装成功大约占用4G内容 亲测有效！！！"},{"title":"微信小程序输入框上移问题","date":"2021-03-04T16:00:00.000Z","url":"/2021/03/05/sunyifang/input/","tags":[["JavaScript","/tags/JavaScript/"],["微信小程序","/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"]],"categories":[["undefined",""]],"content":"微信小程序输入框上移问题 缺陷：输入框顶起整个页面 包括自定义顶栏 解决方式：给input设置adjust-position&#x3D;”false“后自定义input高度 wxml js "},{"title":"关于el-input标签无法输入文字的问题","date":"2021-03-03T16:00:00.000Z","url":"/2021/03/04/linvkey/el-input%20question/","tags":[["JavaScript","/tags/JavaScript/"],["Vue","/tags/Vue/"],["ElementUI","/tags/ElementUI/"]],"categories":[["undefined",""]],"content":" 关于el-input标签无法输入文字的问题 问题描述： 在项目中引用elementUI的&lt;el-input&gt;&lt;/el-input&gt;标签，打字时按空格键无法显示在文本框中。 解决方法： 在&lt;el-input&gt;标签内使用 v-model属性，然后在data()中定义一个值为空，赋给v-model属性 例如 亲测有效！！！"},{"title":"Vue 文档速查","date":"2021-02-23T16:00:00.000Z","url":"/2021/02/24/sicker/fast%20search%20on%20vue/","tags":[["JavaScript","/tags/JavaScript/"],["Vue","/tags/Vue/"]],"categories":[["undefined",""]],"content":"htmlvue 参数为html 属性v-bind:id 表达式 指令v-if 参数v-bind:href 缩写 :href 可变参数 如果 eventName 为 href ，则等价于 v-bind:href 如果 eventName 为 focus，则等价于 v-on:focus 避免使用大写字符来命名键名，因为浏览器会把 attribute 名全部强制转为小写 事件v-on:click缩写:@click 后面可以接 表达式 或者 方法 第二个参数 $event 可以获取到节点信息 事件修饰符 阻止冒泡 其他修饰符 .stop .prevent .capture .self .once .passive .enter .tab .delete (捕获“删除”和“退格”键) .esc .space .up .down .left .right 更多查看事件文档  自定义指令some.js some.vue 计算属性 样式 动态class数组传输 对象方式 v-for 也可以用 of 来等代替 in 分组 两行需要绑定不同的 key 触发监听Vue 将被侦听的数组的变更方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括： push() pop() shift() unshift() splice() sort() reverse() 组件slot 插槽 与 传参 propssome.vue navigationLink.vue 渲染成 props类型 String Number Boolean Array Object Date Function Symbol 多个可能的类型 prop: [String, Number] 示例 非 Prop 的 Attribute 将会被添加到这个组件的根元素上 如果子组件存在class、style，则会自动合并父组件外部提供给组件的值 如果你不希望组件的根元素继承 attribute，你可以在组件的选项中设置 inheritAttrs: false。 示例： 父组件提供 class 子组件自带 class 渲染后 注意 inheritAttrs: false 选项不会影响 style 和 class 的绑定。 v-slot:header 可以被重写为 #header： 更多见  访问父子孙组件属性与方法 以下示例均以 vue-cli 创建的默认实例为模板 根实例在 main.js 实例化vue对象时，引入 data 与 methods 那么所有的节点均可以以 this.$root.xxx 获取到属性与方法 父级组件app.vue 那么，其子组件 如 helloworld.vue 则可以通过 this.$parents.xxx 来获取其属性与方法 子组件 通过 this.$refs.helloworld.XXX 获取子组件的属性与方法 依赖注入在最上级的组件中注入属性与方法 子孙组件通过 可直接使用该属性方法 综合示例main.js App.vue components&#x2F;HelloWorld.vue components&#x2F;HelloChild.vue 输出结果 vuex… 组件复用与自动销毁 过渡template js css 扩展阅读vue 常用代码片段"}]