<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[使用免费国外服务器搭建ChatGPT接口服务[附注册教程/源码]]]></title>
      <url>/2023/06/26/%E4%BD%BF%E7%94%A8%E5%85%8D%E8%B4%B9%E5%9B%BD%E5%A4%96%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BAChatGPT%E6%8E%A5%E5%8F%A3%E6%9C%8D%E5%8A%A1-%E9%99%84%E6%B3%A8%E5%86%8C%E6%95%99%E7%A8%8B-%E6%BA%90%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>最近这段时间，ChatGPT火的一塌糊涂，到处都是介绍ChatGPT的文章，但自从前段时间开始，很多人可能都发现了ChatGPT接口国内调用不了了，而很多人可能是抱着玩玩的心态，并不愿意去花钱另外购买国外的服务器，当然这其中也包括我，由于没有预算去购买一台国外的服务器，所以我公众号的ChatGPT功能也被迫停止运行了一段时间，但是今天我想告诉大家，<strong>本站公众号ChatGPT服务重启了</strong>，还是之前的使用方式，但是速度快了很多，有兴趣的朋友可以去关注公众号去体验，不知道怎么用的可以看公众号的“使用帮助”。</p>
<p>回到正题，虽然我重启了公众号的ChatGPT功能，但是我并没有额外花钱，因为我找到了免费的国外服务器，它不香吗？？？市面上提供服务器免费试用的厂商不少，比如阿里云、亚马逊等等，但是注册比较麻烦，需要信用卡，国外手机号、国外身份信息等等之类的信息，我最先也是准备注册阿里云，后来卡在了手机号这块儿，免费的手机号根本注册不了，而我又不想花钱去买验证码，直到最后我找到了hostbuddy这个网站，全程只需要一个邮箱即可，下面介绍一下注册流程。</p>
<p><strong>一、hostbuddy注册</strong></p>
<p><strong>1、注册账号</strong></p>
<p>首先我们访问hostbuddy官网，地址：<a href="https://www.hostbuddy.com/%EF%BC%8C%E5%B9%B6%E7%82%B9%E5%87%BB%E2%80%9CGET">https://www.hostbuddy.com/，并点击“GET</a> STARTED”按钮，</p>
<p><img src="/./../img/vcbxe" alt="图片"></p>
<p>填写注册信息，并点击注册</p>
<p><img src="/./../img/dbxcvb" alt="图片"></p>
<p>不出意外的话，我们会进入以下界面</p>
<p><img src="/./../img/fdvv" alt="图片"></p>
<p><strong>2、验证账号</strong></p>
<p>进入注册账号时填写的邮箱，找到激活邮件，并点击激活链接</p>
<p><img src="/./../img/fghdf" alt="图片"></p>
<p><strong>3、登录账号</strong></p>
<p>账号成功激活后会转向到登录页，填写我们注册的账号并登录</p>
<p><img src="/./../img/fghdfg" alt="图片"></p>
<p><strong>4、激活试用计划</strong></p>
<p>首次登录完毕之后我们需要激活我们的试用计划，点击“Try Now”</p>
<p><img src="/./../img/asfahcv" alt="图片"></p>
<p>可以看到默认的地区是美国，刚好可以用于我们访问ChatGPT服务，然后我们填入密码和网站名，这里的密码就是后面我们登录FTP的密码，网站名就是网站的目录名称，然后点击“Next”</p>
<p><img src="/./../img/fgdfg" alt="图片"></p>
<p>确认信息并点击“提交”</p>
<p><img src="/./../img/agdg" alt="图片"></p>
<p>此时不要关闭窗口，需要等待激活完成，一般1-3分钟</p>
<p><img src="/./../img/bsfb" alt="图片"></p>
<p><strong>5、创建node应用</strong></p>
<p>在激活完成后，我们登录主机面板并创建node应用，</p>
<p><img src="/./../img/gweg" alt="图片"></p>
<p><img src="/./../img/567356" alt="图片"></p>
<p>这里显示了我们的FTP登录信息和对外域名，我们点击“管理网站”并点击“NodeJs“进入node应用创建界面</p>
<p><img src="/./../img/34567" alt="图片"></p>
<p>按序号依次点击完成node应用的创建，需要注意的是当激活NodeJS后，所有的javascript将会被当作NodeJS运行。</p>
<p><strong>6、登录FTP</strong></p>
<p>在node应用创建完成后，我们用步骤5截图中显示的FTP信息和步骤4设置的密码登录FTP，登录后目录结构如下：</p>
<p><img src="/./../img/246246" alt="图片"></p>
<p>“www”即为存放网站源码的目录，我们进入目录</p>
<p><img src="/./../img/352345" alt="图片"></p>
<p>目录中有2个文件，default.asp是网站的默认页，我们需要删除掉，web.config是网站的配置文件。</p>
<p><strong>7、测试node应用</strong></p>
<p>在node应用创建完毕后我们就可以开始测试了，创建app.js， 并编写如下代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">writeHead</span>(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;Hello, world!&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">listen</span>(process.<span class="property">env</span>.<span class="property">PORT</span>);</span><br></pre></td></tr></table></figure>

<p>注意这里不能自定义端口，必须使用process.env.PORT。将app.js文件传到www目录下，并更改配置文件如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">system.webServer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">handlers</span>&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;iisnode&quot;</span> <span class="attr">path</span>=<span class="string">&quot;*.js&quot;</span> <span class="attr">verb</span>=<span class="string">&quot;*&quot;</span> <span class="attr">modules</span>=<span class="string">&quot;iisnode&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">handlers</span>&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;<span class="name">rewrite</span>&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;<span class="name">rules</span>&gt;</span>                </span><br><span class="line">                <span class="tag">&lt;<span class="name">rule</span> <span class="attr">name</span>=<span class="string">&quot;mysite&quot;</span>&gt;</span>                    </span><br><span class="line">                    <span class="tag">&lt;<span class="name">match</span> <span class="attr">url</span>=<span class="string">&quot;/*&quot;</span> /&gt;</span>                    </span><br><span class="line">                    <span class="tag">&lt;<span class="name">action</span> <span class="attr">type</span>=<span class="string">&quot;Rewrite&quot;</span> <span class="attr">url</span>=<span class="string">&quot;app.js&quot;</span> /&gt;</span>                </span><br><span class="line">                <span class="tag">&lt;/<span class="name">rule</span>&gt;</span>            </span><br><span class="line">            <span class="tag">&lt;/<span class="name">rules</span>&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;/<span class="name">rewrite</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">system.webServer</span>&gt;</span><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>访问步骤5中获取的对外域名，如果页面显示”Hello, world!“则测试通过。</p>
<p><strong>二、部署ChatGPT接口服务</strong></p>
<p>通过步骤一，我们注册了免费的国外服务器，并创建了node应用环境，接下来我们需要开始部署ChatGPT的接口服务，这里我们使用koa搭建一个简单的服务，首先创建基础项目结构，</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├── app.js  </span><br><span class="line">	├── node_modules  </span><br><span class="line">	├── package-lock.json  </span><br><span class="line">	├── package.json  </span><br><span class="line">	├── public  </span><br><span class="line">	├── routes  </span><br><span class="line">	│   └── gpt.js  </span><br><span class="line">	├── utils  </span><br><span class="line">	│   └── ai.js  </span><br><span class="line">	└── views</span><br></pre></td></tr></table></figure>

<p>app.js的代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>();</span><br><span class="line"><span class="keyword">const</span> json = <span class="built_in">require</span>(<span class="string">&#x27;koa-json&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> onerror = <span class="built_in">require</span>(<span class="string">&#x27;koa-onerror&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyparser = <span class="built_in">require</span>(<span class="string">&#x27;koa-bodyparser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> koaBody = <span class="built_in">require</span>(<span class="string">&#x27;koa-body&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> gpt = <span class="built_in">require</span>(<span class="string">&#x27;./routes/gpt&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">onerror</span>(app);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next)=&gt; &#123;  </span><br><span class="line">    ctx.<span class="title function_">set</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">    ctx.<span class="title function_">set</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;Content-Type&#x27;</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">koaBody</span>(&#123;  </span><br><span class="line">    <span class="attr">multipart</span>: <span class="literal">true</span>,  </span><br><span class="line">    <span class="attr">formidable</span>: &#123;</span><br><span class="line">        <span class="attr">maxFieldsSize</span>: <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>,</span><br><span class="line">        <span class="attr">multipart</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">bodyparser</span>());</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(gpt.<span class="title function_">routes</span>(), gpt.<span class="title function_">allowedMethods</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(app.<span class="title function_">callback</span>());</span><br><span class="line">server.<span class="title function_">listen</span>(process.<span class="property">env</span>.<span class="property">PORT</span>);</span><br></pre></td></tr></table></figure>

<p>gpt.js代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)();</span><br><span class="line"><span class="keyword">const</span> &#123; getData &#125; = <span class="built_in">require</span>(<span class="string">&#x27;../utils/ai&#x27;</span>);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">prefix</span>(<span class="string">&#x27;/gpt&#x27;</span>);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">all</span>(<span class="string">&#x27;/chat&#x27;</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;  </span><br><span class="line">    <span class="keyword">const</span> &#123; q = <span class="string">&#x27;&#x27;</span> &#125; = ctx.<span class="property">query</span>;  </span><br><span class="line">    <span class="keyword">if</span> (!q.<span class="title function_">trim</span>()) &#123;     </span><br><span class="line">        <span class="keyword">return</span> ctx.<span class="property">body</span> = <span class="string">&#x27;您想问啥呢？&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="title function_">getData</span>(q);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure>

<p>对于getData方法的实现，这里图方便使用request库（目前已废弃）来发起请求，大家可以根据自己的习惯更改，代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params">prompt</span>) &#123;    </span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;        </span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;https://api.openai.com/v1/completions&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        <span class="attr">body</span>: &#123;</span><br><span class="line">            prompt,</span><br><span class="line">            <span class="attr">max_tokens</span>: <span class="number">2048</span>,</span><br><span class="line">            <span class="attr">model</span>: <span class="string">&#x27;text-davinci-003&#x27;</span>        &#125;,</span><br><span class="line">        <span class="attr">json</span>: <span class="literal">true</span>, </span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">            <span class="title class_">Authorization</span>: <span class="string">&#x27;OPENAI_TOKEN&#x27;</span>       </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    getData,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>将所有的源码连同node_modules一起上传到www目录下，这里稍微有点慢，可以尝试压缩后再上传，然后在线解压，</p>
<p><img src="/./../img/640134123" alt="图片"></p>
<p>等待所有文件上传完毕后，通过“对外地址&#x2F;gpt&#x2F;chat?q&#x3D;你的问题”即可访问我们部署的ChatGPT服务。</p>
<p><strong>三、问题总结</strong></p>
<p>1、hostbuddy服务器的免费试用时长目前是60天即2个月，这个门槛比较低，到期前找个邮箱重新注册即可继续使用，当然也可以选择其他的厂商，比如LAF，免费时长是一个月，需要手机号注册，具体可参考：<a href="https://mp.weixin.qq.com/s?__biz=Mzg5NTczMjAxMg==&mid=2247484797&idx=1&sn=de3d62aa80284e08f658a1421c490991&scene=21#wechat_redirect">用Laf云平台，两步将ChatGPT接入微信公众号(含代码)</a></p>
<p>2、注册hostbuddy一个IP只可注册一次，如果遇到访问注册页显示已经注册的情况，可以选择重启路由器换IP或者使用代理。</p>
<p>3、如果使用代理注册hostbuddy需要注意并不是所有的地区都可以注册免费试用账号，具体支持的地区需要自测，我只发现日本是不行的。</p>
<p>4、hostbuddy服务器目前默认的node版本是v18x，如果需要自定义node版本，可参考：<a href="https://www.hostbuddy.com/support/kb/a2205/how-to-custom-nodejs-version-with-our-server.aspx">https://www.hostbuddy.com/support/kb/a2205/how-to-custom-nodejs-version-with-our-server.aspx</a></p>
<p>5、在更新程序文件时，如遇到代码不更新的情况，需要重新保存入口文件比如app.js，重新上传即可。</p>
<p>6、如果网站无法访问，又没有给出具体的错误信息，可以到FTP网站目录如www下根据访问时间查看iisnode目录下对应的txt文件获得报错信息。</p>
<p><strong>四、结语</strong></p>
<p>如需下载本文所涉及的源码及素材包，请在关注公众号后发送：<strong>gpt</strong></p>
]]></content>
      
        
        <tags>
            
            <tag> ChatGPT </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[有趣的chrom插件]]></title>
      <url>/2023/06/20/%E6%9C%89%E8%B6%A3%E7%9A%84chrom%E6%8F%92%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>推荐一位国外全栈开发者大神：Alyssa，在 Github 上有 5.34K 的关注者。她是一名全栈开发者、Sonuum 公司的创始人。</p>
<p>被 Maker Mag 评为 2018 最佳女性 Maker，并两次入围 Product Hunt Maker of the Year 决赛。</p>
<p>注：Product Hunt 是国外的一个寻找好产品的网站，开发者或者开发团队可以把自己开发的产品发布到网站，与社区的用户一起讨论。本文中推荐 4 个有趣的开源项目，都是由开发者 Alyssa 完成。</p>
<p><img src="/./../img/651" alt="图片"></p>
<p>本期推荐开源项目目录：</p>
<p>\1. 适用于 Chrome 的屏幕录制工具</p>
<p>\2. 强大的浏览器插件</p>
<p>\3. 实时协作的地图工具</p>
<p>\4. 创建漂亮的流程图</p>
<hr>
<h1 id="01"><a href="#01" class="headerlink" title="01"></a>01</h1><p><strong>适用于 Chrome 的屏幕录制工具</strong></p>
<p>适用于 Chrome 的最强大的屏幕录像机和注释工具，使用该插件你可以录制你的屏幕和并且在屏幕任意位置进行绘画、添加文本、添加箭头，同时还可以录制你的电脑音频。</p>
<p>录制完成，你可以对录制的视频片段进行修剪，导出为 MP4、Gif 并且一键保存到谷歌云盘。该开源项目的地址和使用的库的地址都放在了下面。</p>
<p>编程语言：Javascript</p>
<p>开源地址：<a href="https://github.com/alyssaxuu/screenity">https://github.com/alyssaxuu/screenity</a></p>
<p>相关开源组件地址：</p>
<p>用于交互式文本和箭头：<a href="https://github.com/fabricjs/fabric.js">https://github.com/fabricjs/fabric.js</a><br>下拉菜单的开源组件：<a href="https://github.com/hernansartorio/jquery-nice-select">https://github.com/hernansartorio/jquery-nice-select</a><br>用于修剪&#x2F;删除录音部分的范围组件：<a href="https://github.com/leongersen/noUiSlider">https://github.com/leongersen/noUiSlider</a><br>颜色选择块：<a href="https://github.com/Simonwep/pickr">https://github.com/Simonwep/pickr</a><br>用于在录制时异步保存视频：<a href="https://github.com/jimmywarting/StreamSaver.js">https://github.com/jimmywarting/StreamSaver.js</a><br>使下载的视频可搜索的开源组件：<a href="https://github.com/yusitnikov/fix-webm-duration">https://github.com/yusitnikov/fix-webm-duration</a></p>
<p><img src="/./../img/652" alt="图片"></p>
<h1 id="02"><a href="#02" class="headerlink" title="02"></a>02</h1><p><strong>强大的浏览器插件</strong></p>
<p>使用开源项目 Omni 可以帮助你更专业的管理你的浏览器， Omni 提供了一个简单界面，在界面中你只需要使用简单的命令就能管理选项卡、书签、浏览器历史记录、执行各种操作等等。</p>
<p>你可以方便的搜索、浏览管理标签、快速搜索浏览历史记录、与 Notion、Figma、稳定集成，同时好包含更多高级设置。</p>
<p>编程语言：JavaScript</p>
<p>开源地址：<a href="https://github.com/alyssaxuu/omni">https://github.com/alyssaxuu/omni</a></p>
<p><img src="/./../img/653" alt="图片"></p>
<p><img src="/./../img/654" alt="图片"></p>
<p><img src="/./../img/655" alt="图片"></p>
<h1 id="03"><a href="#03" class="headerlink" title="03"></a>03</h1><p><strong>实时协作的地图工具</strong></p>
<p>Mapus 是一种在地图上协作探索和注释的工具，开源一年获得了近 3K 的 Star。使用该开源项目你可以在地图上绘制、标记、画出区域等等，想当于在普通的地图上增加了实时协作的功能。</p>
<p>通过实时协作，你可以与其他用户同步计划和行程；你能使用画笔或者箭头在地图上标记和注释；还可以创建一些标记，方便快速定位标注地图上的位置，同样可以把地图数据导出。</p>
<p>编程语言：JavaScript、CSS、HTML</p>
<p>开源地址：<a href="https://github.com/alyssaxuu/mapus">https://github.com/alyssaxuu/mapus</a></p>
<p><img src="/./../img/656" alt="图片"></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/ePw3ZeGRruyZm3e5tzWtkJfR1EqvtZGmtyaSdznmJHgJDqiclRG4AN4CicTOicwLcPKxTX8vOiam49ribuqHUnLVfaA/640?wx_fmt=png&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p><img src="/./../img/657" alt="图片"></p>
<h1 id="04"><a href="#04" class="headerlink" title="04"></a>04</h1><p><strong>创建漂亮的流程图</strong></p>
<p>这是一个轻量级的 JavaScript 库 近1W人 Star，通过该 Flowy 你能在你的应用中创建漂亮的流程图，使用步骤如下：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/* 在你的 Web 项目引入 flowy.min.js 和 flow.min.css  */</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/gh/alyssaxuu/flowy/flowy.min.css&quot;&gt; </span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/gh/alyssaxuu/flowy/flowy.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">/* 引入 create-flowy 类就能创建可拖动的 block   */</span><br><span class="line">&lt;div class=&quot;create-flowy&quot;&gt;The block to be dragged&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;canvas&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>更详细的教程可以参考该项目的 Readme 文件：</p>
<p><img src="/./../img/658" alt="图片"></p>
<p>开源地址：<a href="https://github.com/alyssaxuu/flowy">https://github.com/alyssaxuu/flowy</a></p>
<p><img src="/./../img/659" alt="图片"></p>
]]></content>
      
        
        <tags>
            
            <tag> 插件 </tag>
            
            <tag> chrom </tag>
            
            <tag> github </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[申请永久免费域名并绑定到个人网站]]></title>
      <url>/2023/06/20/%E7%94%B3%E8%AF%B7%E6%B0%B8%E4%B9%85%E5%85%8D%E8%B4%B9%E5%9F%9F%E5%90%8D%E5%B9%B6%E7%BB%91%E5%AE%9A%E5%88%B0%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/</url>
      <content type="html"><![CDATA[<p><code>eu.org</code>一个从1996开始提供免费域名的组织, 其官网地址是 <a href="https://nic.eu.org/">https://nic.eu.org/</a> ，他帮助学生、爱好者或者非营利组织不用花费购买域名就可能拥有自己的免费域名，虽然 eu.org 网域切确来说这是一个子域名（Subdomain）或者二级域名，但是根据一些网站的资讯，有许多大型互联网公司，像是 Google, Cloudflare, Bing 等厂商都已经将eu.org域名当成是一个顶级网域了。</p>
<p><code>eu.org</code>对个人和组织是免费注册的。</p>
<h1 id="域名申请"><a href="#域名申请" class="headerlink" title="域名申请"></a>域名申请</h1><h3 id="申请地址"><a href="#申请地址" class="headerlink" title="申请地址"></a>申请地址</h3><p>申请地址：<a href="https://nic.eu.org/">https://nic.eu.org/</a></p>
<p>第一次打开你可能会怀疑进错了页面，不用怀疑，他们就是这么简洁的页面。</p>
<p><img src="/./../img/640" alt="图片"></p>
<p>点击 <code>Sign-in or sign-up here!</code> 进入登录页面。</p>
<h3 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h3><p>然后点击Register进入注册页面。输入你的基本信息，比如Name，Email等等基本信息，这里不建议填国内的地址信息，你可以进入 <a href="https://www.haoweichi.com/">https://www.haoweichi.com/</a> 网站随机生成一个虚拟英国或者美国地址，会提高通过的概率。</p>
<p><img src="/./../img/641" alt="图片"></p>
<p>注册成功之后点击<code>New Domain</code>申请新的域名，</p>
<p>设置你的域名，eu.org后缀，比如我申请一个新的域名：techxiaofei.eu.org</p>
<p>![图片](data:image&#x2F;svg+xml,%3C%3Fxml version&#x3D;’1.0’ encoding&#x3D;’UTF-8’%3F%3E%3Csvg width&#x3D;’1px’ height&#x3D;’1px’ viewBox&#x3D;’0 0 1 1’ version&#x3D;’1.1’ xmlns&#x3D;’<a href="http://www.w3.org/2000/svg">http://www.w3.org/2000/svg</a>‘ xmlns:xlink&#x3D;’<a href="http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke&#x3D;’none’ stroke-width&#x3D;’1’ fill&#x3D;’none’ fill-rule&#x3D;’evenodd’ fill-opacity&#x3D;’0’%3E%3Cg transform&#x3D;’translate(-249.000000, -126.000000)’ fill&#x3D;’%23FFFFFF’%3E%3Crect x&#x3D;’249’ y&#x3D;’126’ width&#x3D;’1’ height&#x3D;’1’%3E%3C&#x2F;rect%3E%3C&#x2F;g%3E%3C&#x2F;g%3E%3C&#x2F;svg%3E)</p>
<p>最主要的就是NameServers也就是域名解析，也就是我们要用什么域名解析商来解析域名。</p>
<p>![图片](data:image&#x2F;svg+xml,%3C%3Fxml version&#x3D;’1.0’ encoding&#x3D;’UTF-8’%3F%3E%3Csvg width&#x3D;’1px’ height&#x3D;’1px’ viewBox&#x3D;’0 0 1 1’ version&#x3D;’1.1’ xmlns&#x3D;’<a href="http://www.w3.org/2000/svg">http://www.w3.org/2000/svg</a>‘ xmlns:xlink&#x3D;’<a href="http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke&#x3D;’none’ stroke-width&#x3D;’1’ fill&#x3D;’none’ fill-rule&#x3D;’evenodd’ fill-opacity&#x3D;’0’%3E%3Cg transform&#x3D;’translate(-249.000000, -126.000000)’ fill&#x3D;’%23FFFFFF’%3E%3Crect x&#x3D;’249’ y&#x3D;’126’ width&#x3D;’1’ height&#x3D;’1’%3E%3C&#x2F;rect%3E%3C&#x2F;g%3E%3C&#x2F;g%3E%3C&#x2F;svg%3E)</p>
<h3 id="DNSPod"><a href="#DNSPod" class="headerlink" title="DNSPod"></a>DNSPod</h3><p>这里填DNSPod的地址，也就是腾讯云的域名解析商，使用微信扫码登录就可以。<a href="https://www.dnspod.cn/">https://www.dnspod.cn/</a></p>
<p>扫码之后点击右上角<code>管理控制台</code>-&gt;<code>我的域名</code>-&gt;<code>添加域名</code>，添加刚才你申请的域名，也就是<code>techxiaofei.eu.org</code></p>
<p>点击确认，会提示<code>未使用DNSPod</code>，鼠标放上去会显示具体的DNS服务器地址：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">barlow.dnspod.nethammer.dnspod.net</span><br></pre></td></tr></table></figure>

<p><img src="/./../img/642" alt="图片"></p>
<p>这个DNS服务器就是我们需要在eu.org填写的Name Servers</p>
<h3 id="Name-Servers"><a href="#Name-Servers" class="headerlink" title="Name Servers"></a>Name Servers</h3><p>选择<code>server names</code>，然后填写刚才DNSPod上的两个DNS服务器地址：</p>
<p><img src="/./../img/643" alt="图片"></p>
<p>然后点击Submit后跳转页面显示：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---- Servers and domain names check</span><br><span class="line">Getting IP for BARLOW.DNSPOD.NET: 112.80.181.45 1.12.0.4 61.151.180.44 129.211.176.187 120.241.130.98Getting IP for BARLOW.DNSPOD.NET: 2402:4e00:1430:1102:0:9136:2b30:e554Getting IP for HAMMER.DNSPOD.NET: 112.80.181.111 1.12.0.1 117.89.178.184 129.211.176.224 36.155.149.176Getting IP for HAMMER.DNSPOD.NET: 2402:4e00:1020:1264:0:9136:29bc:87f9</span><br><span class="line"></span><br><span class="line">No error, storing for validation...Saved as request 20230326043206-arf-59848</span><br><span class="line">Done</span><br></pre></td></tr></table></figure>

<p>说明你申请成功了，需要等待1到30天，通过会给邮件通知。</p>
<h3 id="申请通过"><a href="#申请通过" class="headerlink" title="申请通过"></a>申请通过</h3><p>我这里等待了大半个月收到邮件通知，这个时候说明你的免费域名已经申请通过了。</p>
<p><img src="/./../img/644" alt="图片"></p>
<p>收到通知之后就可以去DNSPod上添加具体的解析记录绑定到你的个人网站了：</p>
<h1 id="绑定个人网站"><a href="#绑定个人网站" class="headerlink" title="绑定个人网站"></a>绑定个人网站</h1><h3 id="DNSPod记录"><a href="#DNSPod记录" class="headerlink" title="DNSPod记录"></a>DNSPod记录</h3><p>申请通过之后DNSPod记录会从<code>未使用DNSPod</code>变为无记录，就说明域名已经授权使用DNSPod来解析了。只是还没有添加解析记录。</p>
<p><img src="/./../img/645" alt="图片"></p>
<h3 id="绑定域名到Vercel托管平台"><a href="#绑定域名到Vercel托管平台" class="headerlink" title="绑定域名到Vercel托管平台"></a>绑定域名到Vercel托管平台</h3><p>由于我的网站是部署在Vercel托管平台，所以我们需要先回到Vercel来添加域名：</p>
<p>回到你的vercel，点击你的项目-&gt;<code>Settings</code>-&gt;<code>Domains</code></p>
<p>添加你刚申请的域名</p>
<p><img src="/./../img/646" alt="图片"></p>
<p>添加之后会提示你需要域名解析商添加一条A记录。</p>
<p><img src="/./../img/647" alt="图片"></p>
<h3 id="添加一条A记录"><a href="#添加一条A记录" class="headerlink" title="添加一条A记录"></a>添加一条A记录</h3><p>回到DNSPod域名解析商那里添加一条A记录，记录值就是Vercel平台提示的IP地址。</p>
<p><img src="/./../img/648" alt="图片"></p>
<h3 id="添加成功"><a href="#添加成功" class="headerlink" title="添加成功"></a>添加成功</h3><p>回到Verel托管平台，会自动刷新，显示合法配置。</p>
<p><img src="/./../img/649" alt="图片"></p>
<p>然后点击域名后面的跳转链接，直接打开个人网站。</p>
<p><img src="/./../img/650" alt="图片"></p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>希望大家都能早日成功申请到自己的免费域名。</p>
]]></content>
      
        
        <tags>
            
            <tag> 域名 </tag>
            
            <tag> 绑定域名 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一键部署你的ChatGPT Web网站]]></title>
      <url>/2023/06/20/%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E4%BD%A0%E7%9A%84ChatGPT-Web%E7%BD%91%E7%AB%99/</url>
      <content type="html"><![CDATA[<p>想要搭建自己的ChatGPT Web网站，我们只需要两个账号：</p>
<p>1.Github账号 -<a href="https://github.com/2.Vercel%E8%B4%A6%E5%8F%B7">https://github.com/2.Vercel账号</a> -<a href="https://vercel.com/login">https://vercel.com/login</a></p>
<p>其实<code>Vercel</code>账号可以使用Github账号直接登录：</p>
<p><img src="/./../img/image-20230620135811094.png" alt="image-20230620135811094"></p>
<p>所以我们只需要注册一个Github账号即可。</p>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h3 id="1-Github"><a href="#1-Github" class="headerlink" title="1. Github"></a>1. Github</h3><p>我们首先先在<strong>Github</strong>上访问这个地址：<a href="https://github.com/Yidadaa/ChatGPT-Next-Web">https://github.com/Yidadaa/ChatGPT-Next-Web</a></p>
<p>然后点击右上角的<code>Fork</code>也就是克隆，然后点击<code>Create Fork</code>把这个仓库克隆到你的账号下</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/rpOwdJr9nJGx8dIP7h2tlROcUaVJxZAWjg2VQkdwbhGDuiavOiabD6FNAXV0BnhiaQWrIUh61GlqUJXLvvAWtiaFpQ/640?wx_fmt=png&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>这个时候就会把这个github 仓库克隆到你的个人账号下面。</p>
<h3 id="Vercel"><a href="#Vercel" class="headerlink" title="Vercel"></a>Vercel</h3><p>克隆之后我们去到Vercel平台。<strong>Vercel</strong> 使用刚才的Github账号登录并授权。</p>
<p>我们直接点击<code>Add New-&gt;Project</code>，然后找到我们的<code>ChatGPT-next-web</code>这个Github仓库，点击<code>Import</code>导入</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/rpOwdJr9nJGx8dIP7h2tlROcUaVJxZAWFQ2xWIpNsVsoCBXr3icWLTprZeibuibibjeolBEpZIO0vw9gaHCSicTfWRg/640?wx_fmt=png&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>这个<strong>project name</strong>我们可以随便选，使用默认的即可。</p>
<p>我们唯一要注意的就是这个环境变量，我们需要把ChatGPT的<code>API Key</code>添加进来，然后部署。</p>
<p>这个API Key是为了验证你的身份，需要你有<strong>OpenAI</strong>账号。</p>
<p>![图片](data:image&#x2F;svg+xml,%3C%3Fxml version&#x3D;’1.0’ encoding&#x3D;’UTF-8’%3F%3E%3Csvg width&#x3D;’1px’ height&#x3D;’1px’ viewBox&#x3D;’0 0 1 1’ version&#x3D;’1.1’ xmlns&#x3D;’<a href="http://www.w3.org/2000/svg">http://www.w3.org/2000/svg</a>‘ xmlns:xlink&#x3D;’<a href="http://www.w3.org/1999/xlink'%3E%3Ctitle%3E%3C/title%3E%3Cg">http://www.w3.org/1999/xlink&#39;%3E%3Ctitle%3E%3C/title%3E%3Cg</a> stroke&#x3D;’none’ stroke-width&#x3D;’1’ fill&#x3D;’none’ fill-rule&#x3D;’evenodd’ fill-opacity&#x3D;’0’%3E%3Cg transform&#x3D;’translate(-249.000000, -126.000000)’ fill&#x3D;’%23FFFFFF’%3E%3Crect x&#x3D;’249’ y&#x3D;’126’ width&#x3D;’1’ height&#x3D;’1’%3E%3C&#x2F;rect%3E%3C&#x2F;g%3E%3C&#x2F;g%3E%3C&#x2F;svg%3E)</p>
<h3 id="API-key"><a href="#API-key" class="headerlink" title="API key"></a>API key</h3><p>如果你不知道上面的API Key怎么获得，这个非常简单，我们打开openai的平台地址：<a href="https://platform.openai.com/">https://platform.openai.com/</a></p>
<p>登录之后点击右上角的头像，点击<code>Manage Account</code>-&gt;<code>API Keys</code>-&gt;<code>Create New Secret Key</code>, 然后复制下来保存备用。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/rpOwdJr9nJGx8dIP7h2tlROcUaVJxZAWmaZ0ABHgTvUOL8L2NLH73HSpTzQe7RcvLALJF4QzzpnswsJvcEVG1w/640?wx_fmt=png&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>然后回到刚才的部署界面，在刚才的环境变量在<strong>Name</strong>里面输入 <code>OEPNAI_API_KEY</code>，然后<code>Value</code>就输入我们刚才复制的API Key</p>
<p>点击<code>Add</code>添加，然后我们点击<code>Deploy</code>部署。</p>
<p>当然如果你需要你的ChatGPT支持密码访问，可以添加一个新的环境变量，</p>
<h2 id=""><a href="#" class="headerlink" title="- "></a>- </h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Name: CODEValue: 你想要设置的密码</span><br></pre></td></tr></table></figure>

<p>这个时候，我们的网站就会需要密码访问</p>
<p>我们点击<strong>Deploy</strong>，可以看到它就开始部署了 我们稍等一会就可以看到我们的网站就能部署成功了。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/rpOwdJr9nJGx8dIP7h2tlROcUaVJxZAWbX9QQicmI4icicpYhl1qseP9tRVcbORcj9BN6xDSJLiafibXcYyNUYRnZOw/640?wx_fmt=png&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>我们可以点击就可以进入到我们的ChatGPT 个人网站了。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/rpOwdJr9nJGx8dIP7h2tlROcUaVJxZAWncazp4YgVBZaB7YxEs4PssIuTxFIicjfksVLlVQuCzHGI5ebPO7NqFg/640?wx_fmt=png&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>此时Vercel 给我们自动分配了域名，当然这个域名由于某些原因，在国内可能无法访问，你可能需要使用自己的域名。</p>
<p>我们在刚才的部署成功的页面点击右边的<code>Add Domain</code>添加域名，</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/rpOwdJr9nJGx8dIP7h2tlROcUaVJxZAWcxH0TG4bWnsvkPsqBx6k2bIOicTuWibwxrU8ojwfVCHoD4nnThEUt24w/640?wx_fmt=png&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>然后输入我们的域名，点击添加。我们选择默认的选项， 然后点击添加</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/rpOwdJr9nJGx8dIP7h2tlROcUaVJxZAWbQYribIRg0FbcajDiaiaQ4mKtFOk6BsM7sRcic29cficN2iawcLWicjhLAHZg/640?wx_fmt=png&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>添加之后Vercel会提示我们需要添加两条记录，一条是<code>A记录</code>，一条是<code>CNAME记录</code>。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/rpOwdJr9nJGx8dIP7h2tlROcUaVJxZAWSDItEVJZfGSF423I6eicRzg9oicwnRBcpTajxrfY6K64DuGs02aPypAA/640?wx_fmt=png&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>我们进入到我们的域名解析商，这里我使用<code>cloudflare</code>来解析我的域名。</p>
<p>我们在这里点击添加记录：</p>
<p>•首先我们添加A记录，记录类型是<code>A</code>，名称是<code>@</code>，然后ipv4地址就是刚才的ip地址•然后我们再添加一条 CNAME 记录，记录类型是<code>CNAME</code>，名称是<code>www</code>，值是刚才的值</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/rpOwdJr9nJGx8dIP7h2tlROcUaVJxZAW8bOGFVbBPEQdmA8FnoaNP5tv8M5MnTiaaoRbUE4SxIkIO3nTGS3Ppeg/640?wx_fmt=png&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>现在我们这两条记录，就已经添加成功了</p>
<p>我们再回到我们的 Vercel 托管平台，可以看到，我们的DNS记录已经设置成功了</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/rpOwdJr9nJGx8dIP7h2tlROcUaVJxZAWa8zAOEkYTr9PqKJdeXoEodrBzLicC9hhJuPCR2hC7snDP0dliaibTWxiaQ/640?wx_fmt=png&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>我们添加成功之后直接点击跳转，用我们自己的域名就可以访问ChatGPT Web网站了。</p>
<p>那我们可以开始在这里和ChatGPT进行聊天了。</p>
<h3 id="角色扮演"><a href="#角色扮演" class="headerlink" title="角色扮演"></a>角色扮演</h3><p>我们也可以让ChatGPT来扮演各种角色，此时ChatGPT的回答会更具有专业性。</p>
<p>我们可以看到这里有非常多的角色，我们来让他帮我们扮演一个职业顾问，点击左下角<code>新的聊天</code>，找到<code>职业顾问</code>点击跳转新的聊天。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/rpOwdJr9nJGx8dIP7h2tlROcUaVJxZAWhHswd6SCmZSMicjo8so1AOr0HnouFdHNLlhfiaBrS6w2Cp9icMOh8ZiakA/640?wx_fmt=png&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>然后我们问他问题：<strong>作为一个程序员，我以后的职业生涯应该怎么规划？</strong></p>
<p>点击发送，可以看到作为一个职业顾问，他给我们详细列明了我们有很多职业道路可以选择，然后还给我们的职业生活也做了一些规划。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/rpOwdJr9nJGx8dIP7h2tlROcUaVJxZAWDpy0MXCgHKXnoyzZS6gWlMNG1nrljJIiazFBk0YosUyia209XgEJILMg/640?wx_fmt=png&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>如果不让它扮演职业顾问，它给的回答是怎么样的呢？</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/rpOwdJr9nJGx8dIP7h2tlROcUaVJxZAWRSBibcxxt3pibU1icPdrF7iaTV2lcra0mcV7kKUnLx2LWyjScOdAJm9vtg/640?wx_fmt=png&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>可以看到，同样的问题，当我们不让他扮演任何角色的时候，他给我们的答案就相对专业性就没有那么强。</p>
<p>所以角色扮演在专业的问题上，ChatGPT能给到更好的回答，我们可以使用这个来获得更优秀的答案。</p>
<h3 id="密码访问"><a href="#密码访问" class="headerlink" title="密码访问"></a>密码访问</h3><p>同时这个ChatGPT网站也是支持密码访问的，想要支持密码访问非常简单，上面已经告诉你如何添加环境变量。</p>
<p>如果你之前没有添加，这里教你如何再次添加。</p>
<p>点击你的当前项目，找到<code>settings</code>设置项，然后找到左边的<code>Environment Variables</code>也就是环境变量。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/rpOwdJr9nJGx8dIP7h2tlROcUaVJxZAWHYvSZ78gR9qEFxk8OXTTVB6Nibyy1olLMGBwniahgwSc35AdT4ibyj0Vw/640?wx_fmt=png&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>密码的环境变量的key是<code>CODE</code>，这个值你可以填写你的密码，比如说我填写<strong>techxiaofei</strong>，然后点击保存</p>
<p>现在我们环境已经添加成功了，添加成功之后我们重新编译一下，我们点击redeploy就是重编译。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/rpOwdJr9nJGx8dIP7h2tlROcUaVJxZAWrLib5Reb53gKGtYdpY92JMkzSaGEWL65Rusv076VSibibjibbW3MZpGAug/640?wx_fmt=png&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>重新访问我们的ChatGPT网站，可以看到上面提示：<strong>现在是未授权状态，请点击左下角设置按钮输入访问密码。</strong></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/rpOwdJr9nJGx8dIP7h2tlROcUaVJxZAWGrnq8QqibNjLBsUmOwgd2WyZKSNaej1Gw6hS9KsHkb3zrIIv4nZOjgw/640?wx_fmt=png&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>我们点击左下角的设置，然后找到访问密码，输入我们的访问密码，就可以正常和ChatGPT对话了。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/rpOwdJr9nJGx8dIP7h2tlROcUaVJxZAW1Z9TaXHqdmBYMS7Yp7g0afDLssuRXTR0xkgqwxfSQkQbZ0fDmRHpKA/640?wx_fmt=png&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这个ChatGPT Web网站可以解决在国内无法正常访问ChatGPT的问题</p>
<p>而且它也不需要云服务器，不需要你购买任何东西，完全免费，任何人都可以轻松一键部署，所以赶紧尝试一下吧。</p>
]]></content>
      
        
        <tags>
            
            <tag> vercel </tag>
            
            <tag> ChatGPT </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Markdown 书写示例]]></title>
      <url>/2023/06/19/exp/</url>
      <content type="html"><![CDATA[<h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">::: slot module1</span><br><span class="line">this is module1</span><br><span class="line">::::</span><br><span class="line"></span><br><span class="line">::: slot module2</span><br><span class="line">this is module2</span><br><span class="line">:::</span><br></pre></td></tr></table></figure>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>[[toc]]</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[toc]]</span><br></pre></td></tr></table></figure>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote>
<p>这是一条引用</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这是一条引用</span><br></pre></td></tr></table></figure>
<h2 id="自定义容器"><a href="#自定义容器" class="headerlink" title="自定义容器"></a>自定义容器</h2><p>::: info 信息<br>这是一个信息<br>:::</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">::: info 信息</span><br><span class="line">这是一个信息</span><br><span class="line">:::</span><br></pre></td></tr></table></figure>

<p>::: tip 告示<br>这是一个提示<br>:::</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">::: tip 告示</span><br><span class="line">这是一个提示</span><br><span class="line">:::</span><br></pre></td></tr></table></figure>

<p>::: warning 警告<br>这是一个警告<br>:::</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">::: warning 警告</span><br><span class="line">这是一个警告</span><br><span class="line">:::</span><br></pre></td></tr></table></figure>

<p>::: danger STOP<br>危险区域，禁止通行<br>:::</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">::: danger STOP</span><br><span class="line">危险区域，禁止通行</span><br><span class="line">:::</span><br></pre></td></tr></table></figure>


<p>::: details 点击查看代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你好，VuePress！&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>:::</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">::: details 点击查看代码</span><br><span class="line">```</span><br><span class="line">console.log(&#x27;你好，VuePress！&#x27;)</span><br><span class="line">```</span><br><span class="line">:::</span><br></pre></td></tr></table></figure>

<p>::: v-pre<br><code>&#123;&#123; This will be displayed as-is &#125;&#125;</code><br>:::</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">::: v-pre</span><br><span class="line">`&#123;&#123; This will be displayed as-is &#125;&#125;`</span><br><span class="line">:::</span><br></pre></td></tr></table></figure>

<p>::: center<br>居中文字<br>:::</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">::: center</span><br><span class="line">居中文字</span><br><span class="line">:::</span><br></pre></td></tr></table></figure>
<p>::: right<br>居右文字<br>:::</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">::: right</span><br><span class="line">居右文字</span><br><span class="line">:::</span><br></pre></td></tr></table></figure>
<h2 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h2><p>我是 &#x3D;&#x3D;高亮&#x3D;&#x3D; 的</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我是 ==高亮== 的</span><br></pre></td></tr></table></figure>
<h2 id="代码块行高亮"><a href="#代码块行高亮" class="headerlink" title="代码块行高亮"></a>代码块行高亮</h2><figure class="highlight js"><figcaption><span>&#123;1,3-5&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&#x27;Highlighted!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">``` js &#123;1,3-5&#125;</span><br><span class="line">export default &#123;</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &#x27;Highlighted!&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure>
<p>更多用法参照：<a href="https://v1.vuepress.vuejs.org/zh/guide/markdown.html">https://v1.vuepress.vuejs.org/zh/guide/markdown.html</a></p>
<h2 id="emoji"><a href="#emoji" class="headerlink" title="emoji"></a>emoji</h2><p>:tada:</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:tada:</span><br></pre></td></tr></table></figure>
<h2 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h2><ul>
<li><p><input disabled="" type="checkbox"> 
看板娘</p>
</li>
<li><p><input disabled="" type="checkbox"> 
调色板</p>
</li>
<li><p><input checked="" disabled="" type="checkbox"> 
多语言</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- [ ] 看板娘</span><br><span class="line"></span><br><span class="line">- [ ] 调色板</span><br><span class="line"></span><br><span class="line">- [x] 多语言</span><br></pre></td></tr></table></figure>
<h2 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h2><p>19^th^<br>H<del>2</del>O</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">19^th^</span><br><span class="line">H~2~O</span><br></pre></td></tr></table></figure>
<h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>脚注 1 链接<a href="%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E8%84%9A%E6%B3%A8">^first</a>.</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">脚注 1 链接[^first].</span><br><span class="line"></span><br><span class="line">[^first]: 这是一个脚注</span><br></pre></td></tr></table></figure>
<h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: Start|past:&gt;http://localhost:8080/exp.html[blank]</span><br><span class="line">e=&gt;end: End|future:&gt;http://localhost:8080/exp.html</span><br><span class="line">op1=&gt;operation: My Operation|past</span><br><span class="line">op2=&gt;operation: Stuff|current</span><br><span class="line">sub1=&gt;subroutine: My Subroutine|invalid</span><br><span class="line">cond=&gt;condition: Yes</span><br><span class="line">or No?|approved:&gt;http://localhost:8080/exp.html</span><br><span class="line">c2=&gt;condition: Good idea|rejected</span><br><span class="line">io=&gt;inputoutput: catch something...|future</span><br><span class="line"></span><br><span class="line">st-&gt;op1(right)-&gt;cond</span><br><span class="line">cond(yes, right)-&gt;c2</span><br><span class="line">cond(no)-&gt;sub1(left)-&gt;op1</span><br><span class="line">c2(yes)-&gt;io-&gt;e</span><br><span class="line">c2(no)-&gt;op2-&gt;e</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">```flow</span><br><span class="line">st=&gt;start: Start|past:&gt;http://localhost:8080/exp.html[blank]</span><br><span class="line">e=&gt;end: End|future:&gt;http://localhost:8080/exp.html</span><br><span class="line">op1=&gt;operation: My Operation|past</span><br><span class="line">op2=&gt;operation: Stuff|current</span><br><span class="line">sub1=&gt;subroutine: My Subroutine|invalid</span><br><span class="line">cond=&gt;condition: Yes</span><br><span class="line">or No?|approved:&gt;http://localhost:8080/exp.html</span><br><span class="line">c2=&gt;condition: Good idea|rejected</span><br><span class="line">io=&gt;inputoutput: catch something...|future</span><br><span class="line"></span><br><span class="line">st-&gt;op1(right)-&gt;cond</span><br><span class="line">cond(yes, right)-&gt;c2</span><br><span class="line">cond(no)-&gt;sub1(left)-&gt;op1</span><br><span class="line">c2(yes)-&gt;io-&gt;e</span><br><span class="line">c2(no)-&gt;op2-&gt;e</span><br><span class="line">```</span><br></pre></td></tr></table></figure>


<h2 id="Tex"><a href="#Tex" class="headerlink" title="Tex"></a>Tex</h2><p>Euler’s identity $e^{i\pi}+1&#x3D;0$ is a beautiful formula in $\mathbb{R}^2$.</p>
<p>$$<br>\frac {\partial^r} {\partial \omega^r} \left(\frac {y^{\omega}} {\omega}\right)<br>&#x3D; \left(\frac {y^{\omega}} {\omega}\right) \left{(\log y)^r + \sum_{i&#x3D;1}^r \frac {(-1)^i r \cdots (r-i+1) (\log y)^{r-i}} {\omega^i} \right}<br>$$</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Euler’s identity $e^&#123;i\pi&#125;+1=0$ is a beautiful formula in $\mathbb&#123;R&#125;^2$.</span><br><span class="line"></span><br><span class="line">$$</span><br><span class="line">\frac &#123;\partial^r&#125; &#123;\partial \omega^r&#125; \left(\frac &#123;y^&#123;\omega&#125;&#125; &#123;\omega&#125;\right)</span><br><span class="line">= \left(\frac &#123;y^&#123;\omega&#125;&#125; &#123;\omega&#125;\right) \left\&#123;(\log y)^r + \sum_&#123;i=1&#125;^r \frac &#123;(-1)^i r \cdots (r-i+1) (\log y)^&#123;r-i&#125;&#125; &#123;\omega^i&#125; \right\&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>

<h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>::: demo 这是 demo 标题</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>点我试试<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#hello&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>:::</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">::: demo 这是 demo 标题</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">&lt;p&gt;&lt;span id=&quot;hello&quot;&gt;点我试试&lt;/span&gt;&lt;/p&gt;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">document.querySelector(&quot;#hello&quot;).addEventListener(&quot;click&quot;, () =&gt; &#123;</span><br><span class="line">  alert(&quot;hello world&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">```css</span><br><span class="line">span &#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">:::</span><br></pre></td></tr></table></figure>
<p>存在超自然现象，谨慎使用！</p>
<h2 id="常用Front-Matter"><a href="#常用Front-Matter" class="headerlink" title="常用Front Matter"></a>常用Front Matter</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">标题</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">日期</span> <span class="number">2021-03-4</span></span><br><span class="line"><span class="attr">tags:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">JavaScript</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Vue</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">ElementUI</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">作者</span></span><br><span class="line"><span class="attr">location:</span> <span class="string">地理位置</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">模板</span></span><br><span class="line"><span class="attr">meta:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">description</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">seo用页面描述</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">keywords</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">seo用关键词</span></span><br><span class="line"><span class="attr">summary:</span> <span class="string">列表显示文章简述</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">伪静态用生成文章url</span></span><br><span class="line"><span class="attr">metaTitle:</span> <span class="string">网页的title</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">changefreq:</span> <span class="string">monthly</span> [<span class="string">alway|shourly|daily|weekly|monthly|yearly|never</span>]</span><br><span class="line"><span class="attr">styleClass:</span> <span class="string">someClass</span></span><br><span class="line"><span class="attr">comment:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">waiting:</span> <span class="literal">false</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>其他格式 请使用 Typora 编辑器辅助使用<br>或者参照</p>
<p><a href="https://markdown-it.github.io/">https://markdown-it.github.io/</a></p>
<p><a href="https://vuepress-theme-hope.github.io/md-enhance/zh/guide/">https://vuepress-theme-hope.github.io/md-enhance/zh/guide/</a></p>
<p>书写规范，参见</p>
<p><a href="/2021/04/27/docs-regulation/">此处</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[记录我的小项目-第一弹]]></title>
      <url>/2023/06/19/%E8%AE%B0%E5%BD%95%E6%88%91%E7%9A%84%E5%B0%8F%E9%A1%B9%E7%9B%AE-%E7%AC%AC%E4%B8%80%E5%BC%B9/</url>
      <content type="html"><![CDATA[<p>记录我的小项目-第一弹</p>
<h5 id="一、项目起因："><a href="#一、项目起因：" class="headerlink" title="一、项目起因："></a>一、项目起因：</h5><blockquote>
<p>最近一致在琢磨一个有趣的项目，可以涵盖自己的所学知识，运营、技术、产品、销售。最初规划是希望通过chatgpt的Vercel项目免费开发给美术生，Midjourney出一些美图在小红书、抖音上发进行引流，chatGPT做钩子引导公众号，通过公众号做文章软文做转化，小程序做chatgpt活跃,。最后完成产品的售卖。</p>
<p>而后切入到6月高考季，发现社会热点的仍是聚焦志愿填报，而且自己的目标人群也有十分之一是美术生，所幸自己的Excel运用也不错，就想通过Excel做一个高考志愿填报的系统，主要用公式进行志愿分析，用于引流，料想应该不会差。遂进行初期尝试。</p>
</blockquote>
<p><strong>记录工具：</strong><a href="https://kgithub.com/hexojs">hexojs</a>&#x2F;<a href="https://kgithub.com/hexojs/hexo">hexo</a>博客，vercel部署</p>
<p><strong>chatGpt：</strong><a href="https://kgithub.com/Yidadaa">Yidadaa</a>&#x2F;<a href="https://kgithub.com/Yidadaa/ChatGPT-Next-Web">ChatGPT-Next-Web</a>，vercel部署</p>
<p><strong>流程工具：</strong><a href="https://gitee.com/aipaw">aipaw</a> &#x2F; <a href="https://gitee.com/aipaw/dootask">dootask</a>，docker部署</p>
<p><strong>小程序工具：</strong><a href="https://gitee.com/smalle">月星墙</a> &#x2F; <a href="https://gitee.com/smalle/ChatGPT-MP">ChatGPT-MP</a>，（未开发）</p>
<h5 id="二、项目逻辑："><a href="#二、项目逻辑：" class="headerlink" title="二、项目逻辑："></a>二、项目逻辑：</h5><ol>
<li>Midjourney出图，在小红书（美术生栋栋阿）、抖音号（美术生栋栋阿）发，通过简介发布美术生-找我免费领chatGPT。Midjourney教程。引导（美考攻略公众号）</li>
<li>美考攻略账号直播“美术生志愿填报”引导加公众号领取</li>
<li>公众号发布美术生文章和产品软文，菜单发布ChatGPT单日密码，引导加小程序</li>
<li>小程序有chatGPT,内含升序规划和资料包，引导加微信</li>
<li>产品包设计，美术生小班课、直播插画课、美术生找画室产品</li>
</ol>
<p>chatgpt可以涵盖美术生找画室、美术生查成绩、美术生升学规划、美术报志愿等功能。通过小红书、抖音等新媒体渠道进行引流。</p>
<h5 id="三、整体规划："><a href="#三、整体规划：" class="headerlink" title="三、整体规划："></a>三、整体规划：</h5><ol>
<li>小红书、抖音账号注册；公众号注册（6月完成）</li>
<li>完成Midjourney出图。（6月完成）</li>
<li>完成美术生志愿填报系统设计（6月完成）</li>
<li>公众号文章存档（7月完成10篇）</li>
<li>小班课产品营销物料设计（7月完成10篇）</li>
<li>找老师，出课程（待定）</li>
<li>小程序完善（待定）</li>
</ol>
<h5 id="四、当前进展："><a href="#四、当前进展：" class="headerlink" title="四、当前进展："></a>四、当前进展：</h5><ul>
<li><input disabled="" type="checkbox"> 小红书、抖音账号、公众号注册完成(已完成)</li>
<li><input disabled="" type="checkbox"> 美术生志愿填报设计制作中（计划6月29日前完成）</li>
</ul>
<h5 id="五、指标计划："><a href="#五、指标计划：" class="headerlink" title="五、指标计划："></a>五、指标计划：</h5><p>暂未涉及</p>
<p>&#x3D;&#x3D; 当前项目进展：&#x3D;&#x3D;</p>
<p>已经延后</p>
]]></content>
      
        
        <tags>
            
            <tag> 项目集锦 </tag>
            
            <tag> ideas </tag>
            
            <tag> 小爬虫 </tag>
            
            <tag> 高考网站 </tag>
            
            <tag> 志愿填报 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pandas 使用方法]]></title>
      <url>/2023/06/14/pandas-%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>好的，我可以帮你介绍如何使用 Pandas 来读取 Excel 数据并实现追加数据或追加 Sheet。</p>
<p>首先需要安装 Pandas 库，可以使用以下命令进行安装：</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pandas</span><br></pre></td></tr></table></figure>

<p>有了 Pandas 库，就可以通过 <code>read_excel()</code> 方法读取 Excel 文件了。假设我们有一个名为 <code>data.xlsx</code> 的 Excel 文件，可以使用以下代码读取其中的 Sheet1 中的数据：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_excel(<span class="string">&#x27;data.xlsx&#x27;</span>, sheet_name=<span class="string">&#x27;Sheet1&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure>

<p>其中 <code>sheet_name</code> 参数可以用来指定要读取的 Sheet 名称或 Sheet 的下标。</p>
<p>接下来可以使用 Pandas 提供的方法往 Excel 中追加数据。假设我们有一个名为 <code>new_data.xlsx</code> 的 Excel 文件，要将数据追加到其中的 Sheet1，可以使用以下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取原有数据</span></span><br><span class="line">df1 = pd.read_excel(<span class="string">&#x27;new_data.xlsx&#x27;</span>, sheet_name=<span class="string">&#x27;Sheet1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 待追加的新数据</span></span><br><span class="line">data_to_append = &#123;<span class="string">&#x27;Column1&#x27;</span>: [<span class="string">&#x27;New value 1&#x27;</span>, <span class="string">&#x27;New value 2&#x27;</span>],</span><br><span class="line">                  <span class="string">&#x27;Column2&#x27;</span>: [<span class="string">&#x27;New value 3&#x27;</span>, <span class="string">&#x27;New value 4&#x27;</span>]&#125;</span><br><span class="line">df2 = pd.DataFrame(data=data_to_append)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将新数据追加到原有数据后面</span></span><br><span class="line">df = pd.concat([df1, df2], axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将新数据写入 Excel</span></span><br><span class="line"><span class="keyword">with</span> pd.ExcelWriter(<span class="string">&#x27;new_data.xlsx&#x27;</span>) <span class="keyword">as</span> writer:</span><br><span class="line">    df.to_excel(writer, sheet_name=<span class="string">&#x27;Sheet1&#x27;</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<p>以上代码中，我们首先使用 <code>read_excel()</code> 方法读取名为 <code>new_data.xlsx</code> 的 Excel 文件中的 Sheet1 数据，然后创建一个包含新数据的数据帧 <code>df2</code>，接着使用 <code>concat()</code> 方法将新数据追加到原有数据后面，最后使用 <code>ExcelWriter()</code> 创建一个 ExcelWriter 对象，并使用 <code>to_excel()</code> 方法将数据写入 Excel 文件中的 Sheet1。</p>
<p>如果要新增一个 Sheet，可以使用以下代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取 Excel 文件</span></span><br><span class="line">df1 = pd.read_excel(<span class="string">&#x27;new_data.xlsx&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 待追加的新数据</span></span><br><span class="line">data_to_append = &#123;<span class="string">&#x27;Column1&#x27;</span>: [<span class="string">&#x27;New value 1&#x27;</span>, <span class="string">&#x27;New value 2&#x27;</span>],</span><br><span class="line">                  <span class="string">&#x27;Column2&#x27;</span>: [<span class="string">&#x27;New value 3&#x27;</span>, <span class="string">&#x27;New value 4&#x27;</span>]&#125;</span><br><span class="line">df2 = pd.DataFrame(data=data_to_append)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将新数据写入 Excel 中的新 Sheet 中</span></span><br><span class="line"><span class="keyword">with</span> pd.ExcelWriter(<span class="string">&#x27;new_data.xlsx&#x27;</span>, engine=<span class="string">&#x27;openpyxl&#x27;</span>, mode=<span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> writer:</span><br><span class="line">    df2.to_excel(writer, sheet_name=<span class="string">&#x27;New Sheet&#x27;</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<p>以上代码中，我们使用 <code>read_excel()</code> 方法读取名为 <code>new_data.xlsx</code> 的 Excel 文件中的所有数据，接着创建一个包含新数据的数据帧 <code>df2</code>，最后使用 <code>ExcelWriter()</code> 创建一个 ExcelWriter 对象，并使用 <code>to_excel()</code> 方法将新数据写入 Excel 文件中的新 Sheet 中。请注意，我们在 <code>ExcelWriter()</code> 中指定了 <code>engine</code> 为 <code>openpyxl</code>，并将 <code>mode</code> 参数设置为 <code>a</code>，这样可以以追加模式打开 Excel 文件。</p>
]]></content>
      
        
        <tags>
            
            <tag> -pandas </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[高考志愿网JS逆向]]></title>
      <url>/2023/06/14/%E9%AB%98%E8%80%83%E5%BF%97%E6%84%BF%E7%BD%91JS%E9%80%86%E5%90%91/</url>
      <content type="html"><![CDATA[<p>起因：最近想出一个高考志愿填报的excel系统，想先从网上拿一些资源，最开始的设计是希望从网站上找到近5年的报考指南PDF，然后写代码OCR扫描PDF，摘取关键数据，后发现网站没有PDF,于是告吹。后来就找寻网站，看看有没有我想要的数据，于是找到了”掌上高考“，发现有一些数据是想要的。（其实公司内有一个高考志愿网站，草率了）</p>
<p>处理数据：</p>
<h4 id="第一步：打开开发者工具"><a href="#第一步：打开开发者工具" class="headerlink" title="第一步：打开开发者工具"></a>第一步：打开开发者工具</h4><p>找到对应的数据文件</p>
<p><img src="/./../img/image-202306191342401592.png" alt="image-20230619134240159"></p>
<h4 id="第二步：分析payload"><a href="#第二步：分析payload" class="headerlink" title="第二步：分析payload"></a>第二步：分析payload</h4><p>发现是一个POST请求，需要给他的服务器发送数据，再分析payload，发现里面有要发送的数据，里面有个signsafe（估计是个加密数据）看来必须要逆向才行了</p>
<p>后来发现这个网站做逆向纯属脱裤子放屁了。（既然可以用GET请求得到数据，signsafe就是个摆设）不过正好可以学习一下如何逆向。</p>
<p><img src="/./../img/image-20230619134459860.png" alt="image-20230619134459860"></p>
<p><img src="/./../img/image-20230619134408130.png" alt="image-20230619134408130"></p>
<h4 id="第三步：用search搜索一下signsafe（这个需要用H5模式）"><a href="#第三步：用search搜索一下signsafe（这个需要用H5模式）" class="headerlink" title="第三步：用search搜索一下signsafe（这个需要用H5模式）"></a>第三步：用search搜索一下signsafe（这个需要用H5模式）</h4><p>发现了一堆数据，但是能用的就是第一个</p>
<p><img src="/./../img/image-20230620084226083.png" alt="image-20230620084226083"></p>
<h4 id="第四步：分析数据"><a href="#第四步：分析数据" class="headerlink" title="第四步：分析数据"></a>第四步：分析数据</h4><p>通过上下文判断是用的Hmac sha1加密，找到了signsafe</p>
<p><img src="/./../img/image-20230620084326175.png" alt="image-20230620084326175"></p>
<h4 id="第五步：找到文件，用source打断点试试"><a href="#第五步：找到文件，用source打断点试试" class="headerlink" title="第五步：找到文件，用source打断点试试"></a>第五步：找到文件，用source打断点试试</h4><p>根据文件夹的headers找到数据文件夹<img src="/./../img/image-20230619141030125.png" alt="image-20230619141030125"></p>
<p><img src="/./../img/image-20230620084943417.png" alt="image-20230620084943417"></p>
<p>经过断点运行，多试了几次，发现就是这个代码。</p>
<p>这是一个加密的方法，所有的singsafe都走这一个方法，断点可以走第二遍，就能出现我们想要的safe</p>
<p>具体的加密逻辑是这样的：首先获取url（包括传递的数据），然后去掉<code>https:\\</code>,进行sha1加密，密钥是D23ABC@#56,加密后再进行Base64加密，再将加密的数据用MD5进行加密。最后进行拼接。</p>
<h4 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> common</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将已知信息汇总</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">StringConcatenation</span>(<span class="params">url: <span class="built_in">str</span>, p: <span class="built_in">int</span>, n=<span class="literal">None</span></span>) -&gt;<span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(p):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;signsafe&#x27;</span> <span class="keyword">in</span> common.data:</span><br><span class="line">            common.data.pop(<span class="string">&#x27;signsafe&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> n == <span class="literal">None</span>:</span><br><span class="line">            common.data[<span class="string">&#x27;page&#x27;</span>] = i + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            common.data[<span class="string">&#x27;page&#x27;</span>] = i + n</span><br><span class="line">        <span class="comment"># 将对象作为参数构建URL</span></span><br><span class="line">        <span class="comment"># print(common.data[&#x27;page&#x27;])</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;已完成：&#x27;</span>, i, <span class="string">&#x27;当前页数:&#x27;</span>, common.data[<span class="string">&#x27;page&#x27;</span>])</span><br><span class="line">        params = urllib.parse.urlencode(common.data)</span><br><span class="line">        params = urllib.parse.unquote(params)</span><br><span class="line">        url_new = url + <span class="string">&#x27;?&#x27;</span> + params</span><br><span class="line">        <span class="comment"># 构建加密信息</span></span><br><span class="line">        msg = url_new.replace(<span class="string">&#x27;https://&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        Encrypt(msg)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将信息加密</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Encrypt</span>(<span class="params">msg</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 基础信息</span></span><br><span class="line">    key = <span class="string">&#x27;D23ABC@#56&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    msg = msg</span><br><span class="line">    <span class="comment"># print(msg)</span></span><br><span class="line">    <span class="comment"># hmac SHA1加密</span></span><br><span class="line">    h = hmac.new(key, msg.encode(<span class="string">&#x27;utf-8&#x27;</span>), hashlib.sha1).digest()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># base64 加密</span></span><br><span class="line">    b = base64.b64encode(h)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># md5 加密</span></span><br><span class="line">    m = hashlib.md5(b)</span><br><span class="line">    m = m.hexdigest()</span><br><span class="line">    <span class="built_in">print</span>(m)</span><br><span class="line">    common.data[<span class="string">&#x27;signsafe&#x27;</span>] = m</span><br><span class="line">    <span class="comment"># RequestsHttp()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 做请求</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">RequestsHttp</span>(<span class="params">medth</span>):</span><br><span class="line">    ua = UserAgent()</span><br><span class="line">    useragent = ua.random</span><br><span class="line">    common.headers[<span class="string">&#x27;User-Agent&#x27;</span>] = useragent</span><br><span class="line">    ips = proxies_ip()</span><br><span class="line">    proxies = &#123;</span><br><span class="line">    <span class="string">&#x27;HTTP&#x27;</span>: ips,</span><br><span class="line">    <span class="string">&#x27;HTTPS&#x27;</span>: ips</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">print</span>(ips)</span><br><span class="line">    <span class="keyword">if</span> medth == <span class="string">&#x27;post&#x27;</span>:</span><br><span class="line">        <span class="comment"># 构建URL</span></span><br><span class="line">        res = requests.post(url=common.urls[<span class="string">&#x27;url&#x27;</span>], headers=common.headers,data=common.data)</span><br><span class="line"></span><br><span class="line">        res = res.content.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        json_str = json.loads(res)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;school_all2.json3&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span> ) <span class="keyword">as</span> f:</span><br><span class="line">            json.dump(json_str, f, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        </span><br><span class="line">        res = requests.get(url=common.urls[<span class="string">&#x27;url&#x27;</span>],headers=common.headers, proxies=proxies, verify=<span class="literal">False</span>)</span><br><span class="line">        res = res.content.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        json_str = json.loads(res)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;spictial_school4.json&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">            json.dump(json_str, f, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">    <span class="comment"># StringConcatenation(common.urls[&#x27;url&#x27;])</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">proxies_ip</span>():</span><br><span class="line"></span><br><span class="line">    res = requests.get(url=url).text</span><br><span class="line"><span class="comment"># 判断高匿代理</span></span><br><span class="line">    url2 = <span class="string">&#x27;http://example.com&#x27;</span></span><br><span class="line">    ips = res</span><br><span class="line">    <span class="built_in">print</span>(ips)</span><br><span class="line">    proxies = &#123;</span><br><span class="line">        <span class="string">&#x27;http&#x27;</span>: <span class="string">f&#x27;http://<span class="subst">&#123;ips&#125;</span>&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https&#x27;</span>: <span class="string">f&#x27;https://<span class="subst">&#123;ips&#125;</span>&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url2, proxies=proxies, timeout=<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span> <span class="keyword">in</span> response.headers:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;Proxy <span class="subst">&#123;ips&#125;</span> 是高匿代理!&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(ips)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;Proxy <span class="subst">&#123;ips&#125;</span> is not high anonymity.&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;出现异常&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">        <span class="comment"># common.urls[&#x27;url&#x27;] = &#x27;https://api.eol.cn/gh5/api&#x27;</span></span><br><span class="line">    <span class="comment"># StringConcatenation(common.urls[&#x27;url&#x27;], 10, 230)</span></span><br></pre></td></tr></table></figure>

]]></content>
      
        
        <tags>
            
            <tag> 高考网站 </tag>
            
            <tag> 逆向 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[搭建一个Hexo博客并用vercel部署]]></title>
      <url>/2023/05/31/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAHexo%E5%8D%9A%E5%AE%A2%E5%B9%B6%E7%94%A8vercel%E9%83%A8%E7%BD%B2%20(2)/</url>
      <content type="html"><![CDATA[<p>Hexo 是一款基于Node.js的静态博客生成器，具有简单易用、快速高效、丰富主题、插件支持等特点，适合用于个人博客、技术文档、个人网站等场景。而且基于 markdown 编写起来非常顺畅，个人非常喜欢这个博客。这次下定决心搭建一个 Hexo 博客来实现我日常分享的一个小博客网站。</p>
<h5 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h5><ol>
<li>一台 windows 笔记本电脑，当然 mac 电脑也是没问题的，即使 Linux 电脑也是可以的。</li>
<li>Git工具: Git (git-scm.com)</li>
<li>Node+ Npm工具：Node.js (nodejs.org)</li>
<li>准备好 Hexo 博客程序： <a href="https://hexo.io/">https://hexo.io/</a></li>
<li>创建一个 Git 仓库</li>
<li>注册一个 vercel 账号(如果有自己的服务器或者不适用 vercel 可以不用管这一步)：<a href="https://vercel.com/">https://vercel.com/</a></li>
<li>准备一个域名(如果不需要独立域名可以略过这一步)</li>
<li>hexo 本地图片部署</li>
</ol>
<h5 id="正式开始"><a href="#正式开始" class="headerlink" title="正式开始"></a>正式开始</h5><h6 id="安装-Hexo-工具"><a href="#安装-Hexo-工具" class="headerlink" title="安装 Hexo 工具"></a>安装 Hexo 工具</h6><p>上面的 GIT和 Node在百度或者谷歌上已经有很多相关专业的教程，这里就不详细讲解这块的知识了。一般来说到官网上下载完毕直接下一步下一步即可。我们先来全局安装一个 Hexo 工具</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>


<h6 id="创建-hexo-本地博客程序"><a href="#创建-hexo-本地博客程序" class="headerlink" title="创建 hexo 本地博客程序"></a>创建 hexo 本地博客程序</h6><p>安装完成之后我们就可以使用 hexo 的工具来创建博客了。在电脑上创建一个目录并进入该目录，我起名叫做 javier-blog，刚才我们安装过 Git 工具这时候就派上用场了。在该目录内右键找到 Git Bash Here 点击打开一个 Git的命令行窗口或者你可以使用其他的命令行工具。执行以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo init </span><br><span class="line"></span><br><span class="line"># 下面是在执行上面的命令之后的结果</span><br><span class="line"></span><br><span class="line">INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git</span><br><span class="line">INFO  Install dependencies</span><br><span class="line">INFO  Start blogging with Hexo!</span><br></pre></td></tr></table></figure>


<h6 id="启动-hexo-本地服务"><a href="#启动-hexo-本地服务" class="headerlink" title="启动 hexo 本地服务"></a>启动 hexo 本地服务</h6><p>安装完成 hexo程序直接执行 hexo s 命令就可以打开 hexo 的本地服务。在命令行上会显示启动后的服务地址。</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INFO  Validating config</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>


<p><img src="/...%5Cimg%5Cimage-20230530180853849.png" alt="image-20230530180853849"></p>
<p>以上就正式搭建完成 hexo 的博客程序了。</p>
<h5 id="修改博客的基本信息"><a href="#修改博客的基本信息" class="headerlink" title="修改博客的基本信息"></a>修改博客的基本信息</h5><p>修改 博客的标题，副标题，描述，语言时区等信息</p>
<p><img src="/......%5Cimg%5Ccf60858892fa440482540f548322cbfc.png" alt="在这里插入图片描述"></p>
<p>修改博客地址</p>
<p><img src="/...%5Cimg%5C5dce8878e1fd42228974ee532b328a31.png" alt="在这里插入图片描述"></p>
<p>创建 github 仓库<br>打开 <a href="https://github.com/">https://github.com/</a> 创建一个仓库用来存储我们的部署程序,创建后是这个样子的。</p>
<p><img src="/...%5Cimg%5C87e34403497b4e8092b8e234b7d154aa.png" alt="在这里插入图片描述"></p>
<p><img src="/...%5Cimg%5C2dce5d421d4a45ae8b2628b405f00c85.png" alt="在这里插入图片描述"></p>
<h5 id="同步本地-Hexo-部署页面到-github-中"><a href="#同步本地-Hexo-部署页面到-github-中" class="headerlink" title="同步本地 Hexo 部署页面到 github 中"></a>同步本地 Hexo 部署页面到 github 中</h5><h5 id="初始化-git-项目"><a href="#初始化-git-项目" class="headerlink" title="初始化 git 项目"></a>初始化 git 项目</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin https://github.com/runbrick/javier-blog.git</span><br></pre></td></tr></table></figure>


<p>打开本地 **hexo **项目目录并执行下面的命令,用来安装 git 的部署组件</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>安装之后在项目目录中找到<code>**_config.yml **</code>修改 deploy 参数</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy<span class="punctuation">:</span></span><br><span class="line">  type<span class="punctuation">:</span> &#x27;git&#x27;</span><br><span class="line">  repo<span class="punctuation">:</span> &#x27;https<span class="punctuation">:</span><span class="comment">//github.com/runbrick/javier-blog.git&#x27;</span></span><br><span class="line">  branch<span class="punctuation">:</span> &#x27;master&#x27;</span><br></pre></td></tr></table></figure>


<p>执行 <code>hexo g</code> 然后执行 <code>hexo d </code>将静态页面部署到 <strong>github</strong> 上，是这个样子的。</p>
<p><img src="/...%5Cimg%5C1ee6f73b701249a483c8022e90aa6d6d-1685510451300-24.png" alt="在这里插入图片描述"></p>
<h5 id="将项目部署到-vercel-上"><a href="#将项目部署到-vercel-上" class="headerlink" title="将项目部署到 vercel 上"></a>将项目部署到 vercel 上</h5><p>如果不需要部署到 vercel 上此步可以略过</p>
<p>在 **dashboard **上 选择 <strong>Create a New Project</strong></p>
<p><img src="/...%5Cimg%5C54ae8c862963400ea1c2b86c0bec2e79.png" alt="在这里插入图片描述"></p>
<p>在关联的 **github **账户中，找到刚才的博客仓库，选择 import</p>
<p><img src="/...%5Cimg%5C6a5b756f46bb4e3fb46a5d93bb32c5ca.png" alt="在这里插入图片描述"></p>
<p>进入部署页面选择 deploy</p>
<p><img src="/...%5Cimg%5Cd3f01706b7e84ac19d017b12b45cf23b.png" alt="在这里插入图片描述"></p>
<p>生成之后点击 Continue to Dashboard</p>
<p><img src="/...%5Cimg%5C83a40d63337d4c02a6ac9d7d8a336ca6.png" alt="在这里插入图片描述"></p>
<p>点击 Visit 就可以看到刚刚生成的博客程序了</p>
<p><img src="/...%5Cimg%5C73fea79fe1634cf897df435520360cc0.png" alt="在这里插入图片描述"></p>
<p>将项目资源文件放入同一个仓库中<br>在命令行创建一个新的分支并切换过去</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b source</span><br></pre></td></tr></table></figure>


<p>提交代码</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git push origin source</span><br></pre></td></tr></table></figure>

<p>常用命令</p>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;name&quot;       # 新建文章</span><br><span class="line">hexo new page &quot;name&quot;  # 新建页面</span><br><span class="line">hexo g                # 生成页面</span><br><span class="line">hexo d                # 部署</span><br><span class="line">hexo g -d             # 生成页面并部署</span><br><span class="line">hexo s                # 本地预览</span><br><span class="line">hexo clean            # 清除缓存和已生成的静态文件</span><br><span class="line">hexo help             # 帮助</span><br></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
  
  
</search>
